This is assorted stuff that was done (moved from TODO to DONE ;-)
and which could be somehow important to remember but does not fit elsewhere. 

--------------------------------------------------------------------------------
pass command line arguments to client
DONE: argv array
--------------------------------------------------------------------------------
cross compile linux->win with mingw
works
of course win98 mutitasking still sucks
--------------------------------------------------------------------------------
netzwerk
da spidermonkey von nspr abhängt habe ich überlegt ob ich für den teil
nspr benutze
auf der anderen seite könnte ich auch einfach den netzwerk-teil von adic
nehmen
habe jetzt vorläufig den adic (dope) part genommen - cleanup später
spidermonkey braucht nspr nur wenn man threads benutzen will
--------------------------------------------------------------------------------
switch to fullscreen and quit
=> bug
is not correctly deinitialized
this was a namespace problem because i called deinit in a different namespace
i wanted to call it!
--------------------------------------------------------------------------------
is JSVAL_TO_OBJECT the right thing to do if you want a JSObject* ?
yes after testing with JSVAL_IS_OBJECT
(i think so as JS_ValueToObject also is allowed for ints ...)
--------------------------------------------------------------------------------
put boost into toplevel or src dir or remove it completely?
for now it is inluced in the toplevel dir
update: moved to video module (since it is the only one still using boost)
--------------------------------------------------------------------------------
hash function for objects (serializer):
okay got patch from brendan
and it works !!
see: 
Message ID: <3oqr3c.so1.ln@karme.myfqdn.de>
To search for message id via gougle groups:
http://groups.google.com/groups?as_umsgid=3oqr3c.so1.ln%40karme.myfqdn.de
The End:
http://groups.google.com/groups?selm=4075FD39.3020107%40meer.net
--------------------------------------------------------------------------------
server examples should check that they are started from a server indeed
client examples, too
--------------------------------------------------------------------------------
spielidee:
mit dem roller
2 spieler /evtl. auch mehr über netz
"latenzzeit messen" ;-)

aufgabe der spieler:
möglichst perfekt EGachine morsen
je besser gemorst desto schneller faehrt er

see morse-scooter.js
no network version
--------------------------------------------------------------------------------
allow character input:

define callback:
handleChar=function(c){
  print(c.charCodeAt(0));
}

enter character input mode (keyboard as gamepad will not work in this mode!)
Input.charMode(true);
--------------------------------------------------------------------------------
nochmal anschauen warum das bei watchall nicht so geht wie ich dachte
this was a bug in spidermonkey, see also:
<407E34E1.5080207@meer.net>
and
http://bugzilla.mozilla.org/show_bug.cgi?id=240577
--------------------------------------------------------------------------------
welche spidermonkey version soll ich benutzen?
HEAD
--------------------------------------------------------------------------------
there is some bug with isFromProto or in the serialization
test case: netpong and nc localhost 47000
seems there happens a strange effect

this was interaction with watch
if you watch a property coming from a prototype
toSource will give different results
watchall now does not watch prototype properties
--------------------------------------------------------------------------------
server does not have gl functions
but for the distributed scene-graph it would be useful to have dummy ones
native functions aren't enumerated => this would have been a simple method
to create the dummies
server will not have any dummies
distributed scene-graph does not need them either
--------------------------------------------------------------------------------
cross-compile new SDL version for windows
because:
client/audio/sdlmixer/audiosdlmixer.cpp:100: error: `SDL_RWFromConstMem' 
afair I had trouble with cross-compilation of 1.2.6
opengl did not work
at the moment I still use 1.2.4
mail to sdl news/mail:

I cross compile with mingw from linux to win32.

With SDL version 1.2.4 it works fine.

Since SDL 1.2.6, OpenGL applications fail.
(They crash with a segmentation fault/SDL parachute on startup)

My test case is the testgl in the test directory.
(The other test programs work)

failed SDL versions: 1.2.6, 1.2.7 (I did not test 1.2.5 - AFAIR)
I tried my own cross compiled version
(and out of curiosity the 1.2.7 win32 .dll from the sdl hp)
Btw. I can't find the web-pages related to cross compilation on libsdl.org anymore.

I don't know much about the win32 linking dll/declspec/...
my main platform is linux and I am just happy if I get my stuff
compiled for win32.

A strange effect:
My cross-compiled OpenGL apps running under wine:
SDL 1.2.4:   program runs - but displays nothing
SDL 1.2.6/7: program runs just fine
(=> it works with wine but not with win32)

mingw version: 
i586-mingw32msvc-gcc (GCC) 3.3.1 (mingw special 20030804-1)

this is a slightly modified version of the debian mingw package
mingw32                  3.3.1.20030804.1-1
mingw32-binutils         2.14.90.20030807.1-1
mingw32-runtime          3.2-1

Any help?
Does it only happen to me?

Thanks
karme

EOM

i debugged it
the gl pointers are initialized with wrong values
i already had this problem once with ADIC

what went wrong:
this->gl_data->wglCreateContext is wrong
and the other wgl..., too
this happens in video/wincommon/win_gl.c

a diff between 1.2.4 and 1.2.6 shows that there were a lot of
changes
http://www.libsdl.org/cgi/cvsweb.cgi/SDL12/src/video/wincommon/SDL_wingl.c.diff?r1=1.5%3Arelease_1_2_4&tr1=1.1&r2=1.12%3Arelease_1_2_6&tr2=1.12.2.4&f=h

new:
Init_WGL_ARB_extensions(this);

i had the same problem with adic where i tried to dynamically load opengl
with mingw for win it did not work - i think it is caused by the mingw wrapper
library

i now backed out the changes to (back to version 1.2.4)
wingl_c.h
wingl.c

and it works ;-)
--------------------------------------------------------------------------------
error handling improved:
i now use ECMA_ERROR for all errors resulting from JS functions
(they always throw an exception)
and ECMA_THROW_ERROR for errors in my functions

remember:
after a call to JS_Evaluate... clear pending exceptions!

error handling is most difficult with native functions calling back the
interpreter which might report errors
in the input layer we now use c++ exceptions and catch them just before
returning back to the interpreter (then return JS_FALSE)
the same should be done in server.cpp:
callbacks should throw exception on error
but is sigc++ exception safe? yes i think so
--------------------------------------------------------------------------------

Spidermonkey/JavaScript/xxx wrapping:

There are (at least) three different approaches to wrapping native
code.
Related news posts/threads on netscape.public.mozilla.jseng:
<brt6ur$le31@ripley.netscape.com>
<00rr3c.vo1.ln@karme.myfqdn.de>
<mailman.1065540724.990.clpa-moderators@python.org> (python wrapper)

1) Only use some macros (currently we use this)
Advantages:
+ simple 
+ someone new to the code should be able to understand it quickly
+ low compiler requirements
+ fast compilation
+ works with plain C
+ minimalistic (runtime/code) overhead
Disadvantages:
- needs quite some hand-crafted code (time consuming)
- error phrone
- not very stylish / ugly code / perhaps hard to debug
- changes can't be made at a central point
  (code duplication)

Projects using this aproach:
JSDB <http://www.jsdb.org>

2) Use a code generator
Advantages:
+ generated code should still be simple to understand
+ works with plain C
+ less error phrone
+ changes can be made at a central point
Disadvantages:
- code generator parsers are often not perfect
- another step in the build process

Related projects:
* jsgen <http://www.cs.unm.edu/~cello/jsgen/>
* swig <http://swig.sourceforge.net/>
  (spidermonkey support not yet ready?)

3) Use C++ template magic to automate the wrapping

Advantages:
+ less error phrone
+ no additional step in the build process
+ probably nicer code
+ changes can be made at a central point
Disadvantages:
- slow compilation
- high compiler requirements
- steeper learning curve
- probably overhead (code size/runtime)

Clipp <http://clipp.sourceforge.net>
http://195.137.84.121/Warrick/Geek/SpiderMonkey/index.htm
http://cvs.sourceforge.net/viewcvs.py/boost/boost/boost/langbinding/\
?only_with_tag=langbinding
Boost::python

--------------------------------------------------------------------------------
Remember:
the spidermonkey API (library entry points)
differs whenever compiled with JS_THREADSAFE or not !!
(never use the lib compiled with JS_THREADSAFE if you do not compile with
JS_THREADSAFE - and vica versa)
--------------------------------------------------------------------------------

Why don't we use more of the mozilla project?
Because egachine is intended to be small and it should be possible to port it
to embedded systems. NSPR is 200k and XMPCOM is ~1M

I once more thought about using XPCOM especially when I redesigned egachine
around a single extensible shell but decided not to use XPCOM for now.
See also:
http://groups.google.de/groups?th=efce69c54cf2f08d

XPCOM:
http://www.mozilla.org/projects/xpcom/
http://www.mozilla.org/scriptable/roadmap.html
xpcom standalone:
http://www.mozilla.org/projects/xpcom/xpcom-standalone.html
http://www.mozilla.org/projects/xpcom/xpcom-inside/index.htm

xpcom minimal:
    * NSPR : mozilla/nsprpub
    * Registry : mozilla/modules/libreg
    * XPCOM : mozilla/xpcom


./configure --enable-standalone-modules=xpcom --prefix=/tmp/usr
--------------------------------------------------------------------------------
Libtool hack:

--- /usr/share/libtool/ltmain.sh        2004-07-06 19:48:00.000000000 +0200
+++ /home/jens/develop/Diplomarbeit/egachine/config/ltmain.sh   2004-09-23 18:08:40.000000000 +0200
@@ -43,7 +43,7 @@
 
 PROGRAM=ltmain.sh
 PACKAGE=libtool
-VERSION=1.5.6
+VERSION=1.5.6-karme
 TIMESTAMP=" (1.1220.2.95 2004/04/11 05:50:42) Debian$Rev: 215 $"
 
 
@@ -4314,7 +4314,13 @@
            $show "extracting global C symbols from \`$arg'"
            name=`$echo "$arg" | ${SED} -e 's%^.*/%%'`
            $run eval '$echo ": $name " >> "$nlist"'
-           $run eval "$NM $arg | $global_symbol_pipe >> '$nlist'"
+
+           # hack by karme $EGREP -e \"$export_symbols_regex\"
+           if test -n "$export_symbols_regex"; then
+             $run eval "$NM $arg | $global_symbol_pipe | $EGREP -e \"$export_symbols_regex\"  >> '$nlist'"
+           else
+             $run eval "$NM $arg | $global_symbol_pipe   >> '$nlist'"
+           fi
          done
 
          if test -z "$run"; then
@@ -4326,6 +4332,7 @@
              $mv "$nlist"T "$nlist"
            fi
 
+
            # Try sorting and uniquifying the output.
            if grep -v "^: " < "$nlist" |
                if sort -k 3 </dev/null >/dev/null 2>&1; then
--------------------------------------------------------------------------------
I managed to get caught by this already twice:

the API differs wether JS_THREADSAFE is defined or not
f.e.: JS_GetClass gets 1 or 2 parameters

=> if you compile with the wrong JS_THREADSAFE "setting"
you get "random" crashes (stack corruption)

2 Problems here:
spidermonkey should use something like pkgconfig or sm-config, ....
perhaps that's up to the package maintainers

would be nice to have at least a runtime check
--------------------------------------------------------------------------------
bezier offset curve:
perhaps try to use subdivision
"einfach wie kurve unterteilen"
muss einen haken haben ;-)
we now use svgl which uses agg to do this
--------------------------------------------------------------------------------
Makefile.am's:
we probably should use la_LIBADD instead of la_LDFLAGS when adding libs?
No (why no? forgotton)
--------------------------------------------------------------------------------
AC_LIBLTDL_INSTALLABLE also needs libltdl (to build it if neccessary)
--------------------------------------------------------------------------------
build debian package again
split it into ejs, ejs-multimedia, egachine-base, egachine
This might look like overkill but it is not:
ejs is useful without egachine
ejs-multimedia is useful without egachine
egachine-base: includes the server which only depends on ejs
               (not ejs-multimedia) => server could be installed on a typical
	       server machine (no X, no OpenGL, no SDL, ...)
--------------------------------------------------------------------------------
don't link everything against libz
--------------------------------------------------------------------------------
write a spidermonkey embeding "best practice" document"
started and for now is at http://egachine.berlios.de/embedding-sm-best-practice/
--------------------------------------------------------------------------------
object graph visualization via JavaScript and graphviz (script creating .dot
files suitable for graphviz)
--------------------------------------------------------------------------------
new util module
for now contains: ieval, isCompilableUnit, getObjectID (formerly hashObject)
--------------------------------------------------------------------------------
clean up new egaserver
perhaps this should only be a module => no executable script?, no the script
is useful (egaserver.in)
btw. how will i do this on win32? via .bat script wrapper
--------------------------------------------------------------------------------
watchall does not handle circles?!
i think it does
but it does not handle addition and removal of properties!
this was fixed by the new serialization (ObjectWriter) and Monitorable objects

--------------------------------------------------------------------------------
fix netpong and netpong2
i removed netpong / netpong2 is now netpong
--------------------------------------------------------------------------------
allow #!/usr/.../egachine at beginning of scripts
to allow "normal" execution on unix systems
--------------------------------------------------------------------------------
serialize:
why so complicated?
toSource can handle graphs
only because of the __proto__ field?
i started a second try in src/examples/misc/ser.js
now using the second serializer
which temporarily renames __proto__ to _p
still not the best solution

yet another approach is the ObjectWriter
--------------------------------------------------------------------------------
we often assume that there is only one javascript context
especially in client/video/jsgl
fixed (i think)
--------------------------------------------------------------------------------
wrap std::streambuf (done by the stream module)
--------------------------------------------------------------------------------
do not install all examples
somehow tag the examples which should not get shipped with binaries
the tag is DONTINSTALL in the first line
(done: but only install does use this
todo: crossmake (win32) should use this, too

update:
we use autotools (autoconf,automake,...) again
=> the above is obsolete

using autotools again since I did not find a better replacement:
cons (perl basiert):
- no parallel builds?
- dead?

cook?
jam?

scons (python):
+ anscheinend verbesserung von cons
- langsam?
- no support for cross compilation
+ ansich ganz nett
 
ant (java basiert): hmm
--------------------------------------------------------------------------------
distributed scenegraph:
at the moment only changes to simple properties are distributed
at least missing:
distribute changes to arrays (see watcharray.js in limbo/js)
allow addition of objects to arrays/objects
(this is difficult to get right since the server must remember which objects
where already distributed to the client to keep object relationships
correct - in case objects are shared.
example:
a={x:...}
root={r:a}
distribute(root);
root.b=a; <---

this means we must remember the hash value of all distributed objects and the
remote name (now we get back to the more complex serialization algorithms)

another aproach would be to drop the distributed scenegraph and to use a
"distributed eval" / function to evaluate code on server and clients
of course this would not hide the network stuff verry well and would require
the user to serialize objects as needed => user is forced to think about local
and remote objects

distributed scenegraph now works
there are some limitations:
	all scengraph objects must be monitorables
	=> js [] don't work
--------------------------------------------------------------------------------
Eine Shell:

jetzt habe ich schon egaserver egachine egares
ansich wäre eine shell mit einem befehl zum plugin nachladen und einem befehl
zum Ausführen von Script Dateien am Besten
aber es muß sicher sein => befehl der den plugin ladebefehl sicher abschaltet
befehl um js skripte auszuführen
befehl der noch genau ein js skript ausführt

plugin interface überlegen (C/C++ und JS)

JS:
dlopen(libname)
EvaluateScript()

// ab da geht dlopen und EvaluateScript nicht mehr - danach ist der context
// aber auch untrusted => evtl. problem beim deinitialisieren
EvaluateUntrustedScript() 

was ist import in JS?
was kann die smjs shell?

was benutzen?
libtldl - wahrscheinlich schon - schön klein
glib? eher nein

evtl. noch schauen wie es die anderen machen (möglichst programme die es
auf vielen plattformen gibt)

done using libltdl
--------------------------------------------------------------------------------
win32 dll's must be self contained:

http://www.belgeler.org/autobook/autobook-DLLs-with-Libtool.html: 

"All of the symbols required by a dll at runtime, must be resolved at
 link time. With some creative use of import libraries, it is usually
 possible to work around this shortcoming, but it is easy to forget
 this limitation if you are developing on a modern system which has
 lazy symbol resolution. Be sure to keep it at the back of your mind
 if you intend to have your package portable to Windows."

libtool:
use -no-undefined (to be able to cross-compile dll's for win32)
--------------------------------------------------------------------------------
renamed plugin to module everywhere
--------------------------------------------------------------------------------
modules may consist out of script and/or native lib
--------------------------------------------------------------------------------
renamed the zlib wrapper module 
(from zlib.XXX to ejszlib.XXX)
--------------------------------------------------------------------------------
convert all wrappers to modules
treat the module loader as module itself (as far as possible ;-)
--------------------------------------------------------------------------------
try to reduce memory usage:
spidermonkey can parse directly from a  FILE*
=> no need to read the script into memory first

but unfortunately this only works with latin1 input
jsscan.c:343: ubuf[i] = (jschar) (unsigned char) cbuf[j];

=> not really an option
=> must use memory buffer (or hack on spidermonkey)

for interactive shells there is also:
JS_BufferIsCompilableUnit
(wrapped by util.isCompilableUnit)
--------------------------------------------------------------------------------
remember: debian spidermonkey uses nspr (and JS_THREADSAFE)
i now try to detect JS_THREADSAFE usage and spidermonkey in configure.ac
--------------------------------------------------------------------------------
dlopen and nvidia opengl will make trouble?
link against pthread?
see /usr/share/doc/nvidia-glx/README.gz
works
--------------------------------------------------------------------------------
we need:
different spidermonkey version
(the one in testing has bug 240577)
update:
fixed version entered testing => we can use it
--------------------------------------------------------------------------------
okay
modules can now be linked statically
the version with static modules is: 959K
the version with dynamic modules is: 1,3M

libtool dependency tracking is shit since it always links against all libs
(which isn't required on linux)
why is this shit?
for example you link against SDL (which depends on many other libs)
now you could replace this SDL with another one (with minimalistic dependencies)
=> your program should now have minimalistic dependencies, too
but no - libtool linked against every lib ....
--------------------------------------------------------------------------------
build stuff:

--disable-module does not work yet

should now work?
--------------------------------------------------------------------------------
