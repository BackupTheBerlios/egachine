		EGachine <http://egachine.berlios.de>

is an JavaScript game  engine  focused on 2D multi-player  (networked)
games. The idea is to provide a tool  for learning by writing computer
games.  EGachine  is based upon  a simple  extensible JavaScript shell
(EJS)  and  different   modules  providing  functionality required for
programing games.

		  EJS (extensible JavaScript shell)

is a  simple minimalistic (currently non-interactive) JavaScript shell
utilizing mozilla's  JavaScript interpreter SpiderMonkey.  The purpose
of EJS is to get a JavaScript shell which is  extensible in the spirit
of other interpreters like Perl  and Python.  The module framework  is
kept as simple as possible  to encourage code-reuse among people using
the SpiderMonkey API directly, even if they don't use EJS.

----------------------------------------------------------------------

			       WARNING:

  THIS SOFTWARE COMES WITHOUT ANY WARRANTY PERHAPS IT DESTROYS YOUR
			       COMPUTER

		       FOR DETAILS SEE COPYING

THIS IS WORK IN PROGRESS (ALPHA) THE SERVER AND CLIENT ARE INSECURE !
			   (see also TODO)

    For now you should treat scripts like binaries and take care!

----------------------------------------------------------------------

EGachine QUICK-START

Input / controls:

General:

Key		Function		Comments

ESC		quit
Alt+Enter	toggle fullscreen	(not supported on win32)


Gamepads:

If you have (a) joystick(s), they act like gamepads.
Joysticks/Gamepads are prefered but are emulated by keyboard
if not available.

Keypad 1:
cursor keys on the number block
buttons: 0 and . (, on german keyboards)

Keypad 2:
w,a,s,d
buttons: 1 and 2

Keypad 3:
cursor keys
buttons: right alt and right meta

NOTE:

For best results please make sure your video driver synchronizes page
flips to the vertical retrace of your monitor.


RUNNING:

Windows:
All .bat files should do something.

Linux/Unix users:
USAGE: egachine script

----------------------------------------------------------------------

For compilation instructions / installation procedure see INSTALL

----------------------------------------------------------------------

FEATURES/GOALS:

- open source / free software (GPL)

- tool for learning by writing computer games

- beginner friendly:
  Get  beginners started with  game programing.  For now  there  is no
  detailed documentation (any volunteers?) but the examples should get
  you started.  JavaScript  is a nice  language and you don't need  to
  compile code.   You  only need EGachine   and a  text editor  to get
  started.  SpiderMonkey does a quite  good job at giving useful error
  messages.

- quick development of games
  sometimes you just want to write a game within few hours

- portability

- run untrusted code in a secure manner:
  This  is similar  to Java  applets or  like  browsers run JavaScript
  code. This  means you only download  the client  once and games/apps
  may  be  shipped via network. Neither   server nor client can access
  files from JavaScript code. (ATTENTION: at the moment you should not
  run untrusted scripts)

- network support:
  Writing multi-player network  games/apps should be easy.  The client
  may establish one connection  to a server. The  server may listen on
  one    port and   establish   one connection     (for example to   a
  meta-server).

- not limited to games - could also be used as:
  presentation tool, "movie" player  similar to flash, special purpose
  terminal, tool to teach/learn OpenGL

- (soft) real time requirements:
  Especially garbage collection (GC)  is problematic. ("real  time GC"
  required). At  the moment this  isn't implemented  and the stock  GC
  from spidermonkey is used. (But it works quite well.)

- modular:
  based upon EJS and modules for EJS

  Video modules:
  - OpenGL language bindings
  - Video layer (basic 2D functionality)
  - a simple scene-graph
  - experimental SVG module

  Audio module:
  - very basic functionality
  - play music
  - play samples

  Input module:
  For beginners:
  - gamepad like input devices (perhaps emulated by keyboard)
  - or text input
  For advanced users:
  - events for:
    keyboard, mouse, joystick, window manager, ...

  Network Module:
  - basic stream interface (read/write)
  - distributed object graph

  ...

----------------------------------------------------------------------

HELP WANTED:

if you like EGachine please contact me/us. For now mail me directly:
karme@berlios.de

----------------------------------------------------------------------

http://jsdoc.sf.net

----------------------------------------------------------------------

Projects similar to EGachine:

Sphere <http://sphere.sourceforge.net/>:
  License: GPL
  Description: "Ever had that perfect plot idea for  an RPG but didn't
  have the programming knowledge to create it? Enter Sphere. Sphere is
  a   console-style RPG engine  that allows   others  to create an RPG
  similar to Final Fantasy, Dragon Quest, or Phantasy Star."

JiggleScript <http://www.jigglescript.com/>:
  License: ?
  Description: "JiggleScript is a development enviroment that combines
  the well-known web programming  language JavaScript with OpenGL, the
  standard graphics API used in  modern 3D games. The target  audience
  are those that may be familar  with JavaScript already from building
  web pages and  would like to try  their hand at something that might
  be a little more  fun  without needing to  learn C  or C++ or  other
  "bigger" languages."

Pygame <http://www.pygame.org/>: 
  License: LGPL
  Description: "Pygame is a set of Python modules designed for writing
  games.  It is written  on  top of the   excellent SDL library.  This
  allows you to create fully featured games and multimedia programs in
  the python  language. Pygame is highly portable  and runs  on nearly
  every platform and operating system."

Eel/eelbox <http://eel.olofson.net/>
  License: LGPL
  Description: "EEL is  a scripting and programming language, designed
  specifically for  hard real  time  applications. The  primary target
  areas  of application are  control  engineering and audio synthesis,
  but EEL should also  be suitable for game  scripting and for  adding
  scripting capabilities  to  real  time multimedia  applications. 

  The syntax is  C-like, but the language  is higher level than C, and
  "safe"  in the sense that  EEL programs should not  be able to crash
  the virtual machine or the host application. EEL has dynamic typing,
  automatic memory  management,  exception handling  and built-in high
  level data  types such as vectors,  arrays and tables. New such data
  types can be added at run time by host applications.

  EEL  compiles into byte-code that  runs  on a virtual machine, which
  means that  no explicit support for  specific achitectures is needed
  for  portability.  The   implementation  is deliberately  very  self
  contained    and has few   dependencies, so  that   it can be easily
  integrated into  "strange"  environments,  such as  embedded devices
  running real time operating systems."

----------------------------------------------------------------------

Projects also embedding SpiderMonkey (similar to EJS):

JSDB  <http://www.jsdb.org/>:
  "is a JavaScript shell  designed with network-centric programming in
  mind.  It can  be used as  a database interface,  XML processor, and
  internet-oriented scripting language. JSDB can  do nearly any  batch
  processing task that Visual Basic can do,  and it has drivers to let
  you read and send  email, query an  Oracle database, and run regular
  expression searches,  without having to  learn a specific SQL syntax
  or install a bunch of ActiveX components."

A list of projects embedding SpiderMonkey:
<http://www.mozilla.org/js/projects.html>

----------------------------------------------------------------------

Other programing languages / runtime environments  / VMs that might be
interesting for similar projects:

- perl6 <http://www.perl.org/> (parrot VM):
  sandbox, small minimalistic environment?

- python <http://www.python.org>:
  sandbox, small minimalistic environment?

- scheme: (soft)-realtime, which implementation?

- squirrel <http://squirrel.sourceforge.net/>
  (squadd <http://sourceforge.net/projects/squadd>)

- lua <http://www.lua.org/>

- io <http://www.iolanguage.com>

- goo <http://www.googoogaga.org/>: sandbox?

- jrate / Real-Time Specification for Java (RTSJ)
  <http://jrate.sourceforge.net/>:  java not  suitable  for beginers /
  rapid     development?      - this  is    why     i stopped jgachine
  <http://jgachine.berlios.de>

- erlang (see http://esdl.sourceforge.net/)
- gamemonkey http://www.somedude.net/gamemonkey/
----------------------------------------------------------------------
