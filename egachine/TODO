General TODO list (each module might have its own)

================================================================================
SECURITY RELATED BUGS:
--------------------------------------------------------------------------------
jsolait does use eval at some points
make sure this doesn't allow clients to execute code on server
the jsonclass (transformObj) feature seems to be a problem, too
=> server still executes client code
--------------------------------------------------------------------------------
spidermonkey bug: assertion in jsarena.c:274 fails
this only happens with the debug build
i posted it to the newsgroup
perhaps only the assert is wrong ;-) ?
see:
http://bugzilla.mozilla.org/show_bug.cgi?id=239721
--------------------------------------------------------------------------------
spidermonkey bug:
https://bugzilla.mozilla.org/show_bug.cgi?id=271716
https://bugzilla.mozilla.org/show_bug.cgi?id=271718
https://bugzilla.mozilla.org/show_bug.cgi?id=271734
https://bugzilla.mozilla.org/show_bug.cgi?id=271739

a = new Array(); while (1) { (a = new Array(a)).sort();}

or

var i=100000;
var a;
while (--i) {
      (a = new Array(a)).length;
}

--------------------------------------------------------------------------------
server network code must be non-blocking (or use threads)
now a client can simply block the server => DOS

non-blocking io:
the native code for non-blocking i/o for sockets is in place
(win32 implementation is missing)
the wrapper at the momenet can't expose it since we in fact wrap std::streambuf

how to detect errors?
at the moment we use blocking i/o => when read does return an empty string
we are at eof/eos
--------------------------------------------------------------------------------
client must always be interruptable
=> how to interrupt the interpreter from time to time?
does spidermonkey support this? similar to the GC
(or perhaps use threads)
yes there is some hook (branch callback)
--------------------------------------------------------------------------------
egachine.in: see TODO / BUG
ejsnet.cpp: see todo
--------------------------------------------------------------------------------
are the wrapped libraries secure?
how buggy/safe/secure/trustworthy are opengl/mesa implementations?
SDL_mixer/mikmod?
SDL_image?
--------------------------------------------------------------------------------
the svgl module is completely insecure at the moment
================================================================================



OTHER:
--------------------------------------------------------------------------------
Error reporting from native code:
be careful with C++ exceptions:
c++ exceptions can't be thrown through c-code
(this was true but it seems today the c-compiler handles this?)
anyway we can't throw exceptions in native code called by the interpreter 
since he will not like it

now there is a macro for handling errors: EJS_THROW_ERROR
all spidermonkey functions returning JS_FALSE already did set the error
=> simply return JS_FALSE
if you want to generate an error use EJS_THROW_ERROR

at the moment always the same error exception is thrown and the only way
to differentiate between them is the message => really bad
--------------------------------------------------------------------------------
somehow remove dontwatch hack
dontwatch hack is used by the (deprecated) Mover object
remove Mover object and dontwatch hack (and examples using Mover)
--------------------------------------------------------------------------------
FONT STUFF:

currently we have one built in font which is stored in one texture
("bitmap" font - in fact a png grayscale with alpha blending in the moment
at minimum this font should be much nicer - it is very ugly)

ttf fonts:
library shootout:
freetype directly: too much work? => NO
gltt: no freetype2 support => NO
oglft: no deb, seems it wasn't updated for a while? => NO

					SDL_ttf    vs.	ftgl
cross-compile/portability		trivial		simple
features				minimal		many

SDL_ttf uses textures
ftgl can use textures as well as polys

for now we use SDL_ttf (perhaps simpler, often used)
and stay with texture fonts

=> redesign texture handling completely
allow to create textures from text and data

currently creating a texture is coupled with image decompression
=> perhaps change this?
image decompression could become a seperate step
on the other side this perhaps would require some image object
hmm
access to image data is useful
currently one would need to create a texture and then it would
require opengl to get the image data
(=> load image|decompress|load to graka|get from graka
 => stupid)
i want to keep it small and simple
and i don't want to introduce a "hard" dependency on SDL
good design would be a seperate image api / binding
but this fights the keep it small and simple aproach
and it is very unlikely that there will be any other implementation
than the SDL one?
the image api would merely be a SDL_Surface wrapper
perhaps there is already an existing one?
nothing found

hmm ttf fonts are quite huge
but then again if i would supply a unicode bitmap font this 
probably would be much bigger

btw. what about user defined fonts?
ttf fonts supplied by the user are problematic
is freetype secure?
font images wouldn't be problematic

http://www.gameprogrammer.com/polyfonts/polyfonts.html ?
hmm linux only? try to cross-compile it
there is a zip => probably win32, too
does not use freetype

Bob Pendleton wrote:
> So, yes, you can use polyfonts to draw text in an SDL/OpenGL program.
> That is pretty much what I wrote it for. I just happened to have some
> old graphics code floating around so I added the ability to use it with
> *all* SDL surfaces. For my own personal use I have a version where I
> stripped out the sgl library and only support OpenGL.

hmm an end-user friendly choice would be to use system fonts
and let the end-user decide which fonts to use

fonts once again:

It seems there are the following options:
SDL_ttf (uses freetype 1?)
SDL_ttf2 (uses freetype 2?)
polyfonts (no dependencies)
freetype 2 directly
libgltt2 (uses freetype 1)
oglft
ftgl

any missing here?

my requirements:
free software
security?
cross plattform (easily cross compilable)
small
opengl
unicode

svgl uses glft for font rendering
perhaps we could always use glft
--------------------------------------------------------------------------------
win32 timestamp currently only ms precision
--------------------------------------------------------------------------------
report spidermonkey docu "bugs"

JS_NewObject: class pointer may be NULL => Object
FunctionSpec: extra arguments field
--------------------------------------------------------------------------------
perhaps complete pong3
--------------------------------------------------------------------------------
supply version information
nearly done
not yet done:
expose opengl version info
(for now you can test for the existance of opengl functions)
currently checkVersion assumes complete downward compatibility and no upward
compatibility
this is of course stupid - and wouldn't require a version number with 3 parts;-)
it should work like this:
micro: script wants 1.0.3 (=> 1.0.5 is okay but 1.0.2 is not)
minor: script wants 1.2.3 (=> 1.4.3 perhaps okay but 1.0.3 is not)
major: script wants 2.2.3 (=> 3.2.3 not okay and 1.2.3 not okay)
=> different majors never ok (perhaps exception 0 instead of 1)
we make no guarantee that this scheme is established until version 1!!
expose spidermonkey/javascript version
--------------------------------------------------------------------------------
unicode text input does not work yet - and perhaps even is buggy?
stdin text input currently is always latin1
text input via. Input layer is unicode and seems to work quite well
(via SDL)
--------------------------------------------------------------------------------
redesign input layer?

perhaps rethink the gamepad event design
or the complete input layer?
the idea was to keep it simple
but perhaps someone wants mouse input/analog joy input/..
for now we keep the simple everything is a gamepad
and you can enter some text aproach
sometime in the future:
expose more of the SDL Input stuff
it is more powerful and there will not be any other implementation
in the near future
let user redefine keys / gamepad mapping
--------------------------------------------------------------------------------
i am not sure if I do create the dll with my mingw cross compiler the right way
do I need -fPIC, too ? no i don't think so - it seems all win32 code generated
by mingw is position independant
do I need the declspec shit and have to use dlltool?
for now I simply compile like I would do on a unix system and it seems to work

cross compiling the modules results in large dlls
because libstdc++ is linked in statically
=> for windows we link the modules statically
(is there a mingw with shared libstdc++?)
--------------------------------------------------------------------------------
client and server should check protocol compatibility/version
--------------------------------------------------------------------------------
kick out the video stuff which only duplicates the gl wrapper
should i keep a subset in Video anyway?
currently examples in client/opengl may use gl. and in client/ itself
they should not use it - otherwise the destinction would be stupid
i think it would be a good idea to have an explicit subset
of course this must be documented
are the scenegraph objects allowed to call gl functions? yes

end users now have the choice to use the scene-graph+video functions and no
gl functions (and optionally might use gl functions)

in the video module currently remain three gl related functions:
    FUNC(createTexture,1),
    FUNC(drawTexture,1),
    FUNC(drawText,3),
this is because image handling and text handling currently is in the video
module
it would be nicer to have a image module and a text/font module
(note: svgl module uses svgl's glft for font rendering)
--------------------------------------------------------------------------------
I just found the sdl mingw developer package again
should try if opengl works with it => no need for hacked SDL version?
--------------------------------------------------------------------------------
compression support
we already depend on zlib
done: Zlib.compress and Zlib.decompress
todo: allow files passed on startup to be .gz
--------------------------------------------------------------------------------
perhaps preprocess the examples
because the have quite some code in common
=> annoying if this code needs an update
--------------------------------------------------------------------------------
base64:
perhaps native base64 encode/decode

we now have two base64 modules:
jsolait also provides base64 encoding/decoding
--------------------------------------------------------------------------------
Attention:
JS_ValueToNumber does not fail if value==undefined
i have to test what happens - i guess NaN (since a double is returned)
and if a NaN double is converted to an int ...
also check warnings
perhaps the simplest method would be to check this in javascript where not
critical
--------------------------------------------------------------------------------
I18N:

charset:
	javascript supports unicode utf16?
	spidermonkey has a "seperate" unicode api? yes (UC functions)
	now do we really want the script files utf16 encoded? no
	utf8 maybe
	how are unicode strings represented internally by spidermonkey?
	(2bytes utf16)
	first take a closer look at how this all is meant to work

strings/messages:
	javascript has no special features for translating messages?
	come up with some framework

gcc 3.3.x c++ locale stuff seams buggy:
http://gcc.gnu.org/bugzilla/show_bug.cgi?id=9520

--------------------------------------------------------------------------------
audio:

In the long run perhaps openal is the way to go.
For now i wanted to use the sound layer of adic (http://adic.berlios.de).
Problem: music playing with SDL_mixer <=1.2.5 only works from files (not RWOps)
In adic there also was a bug with mod playing - the loops were wrong afair.

we currently depend on a CVS version and include it in the egachine package
update: not true anymore

OpenAL made much advances since last time I tried it.
Really nice
Unfortunately there is no mod support?
and mod is the way to go for egachine since size matters
ogg/mp3's are simply too big
midi would be an option (not really)
one could make a mod like format with openal+javascript
but then there is no editor
an option would be than to convert mods to this format
for now we use SDL_mixer 

other options:
SDL_sound
mikmod directly
there is another mod playing library used optionally by xmms
--------------------------------------------------------------------------------
lsb linux binaries
--------------------------------------------------------------------------------
Game ideas:

use "insecure" server to make a programming game
the server executes all client commands
the client has a javascript "shell" which allows execution of arbitrary commands
the players may program all clients via the server

a game about software patents
choose side: patent lobby, patent opponent, politician
--------------------------------------------------------------------------------
SVG support (direct or indirect via transformation)
decided to use svgl - since it already does what I wanted to do and I
do not have the time to reinvent the wheel
svgl module is still very experimental and buggy
--------------------------------------------------------------------------------
update project description to reflect new focus
in fact a description should seperate ejs from the modules and describe the
modules
--------------------------------------------------------------------------------
cooperate with other spidermonkey users using the spidermonkey API directly
(not via xpcom)
and working on similar projects (in the end we all write a js shell and only 
add different language bindings)
this was the reason for the redesign around ejs
similar projects:
- shanti rao (jsdb) http://www.jsdb.org
- ...
--------------------------------------------------------------------------------
Monitorable object:
rejecting property add's does not work at the moment?
performance?
--------------------------------------------------------------------------------
nochmal die context geschichten anschauen
vielleicht kann ich das ja doch gebrauchen
--------------------------------------------------------------------------------
PLAN:

also ModuleLoader soll ja scripte laden können
=> 1. Scripte laden von C++

was ist das problem?
in Javascript will ich machen:
ModuleLoader.load("Zlib")
evtl. mit lazy resolver:
Zlib.compress lädt automatisch das Zlib module

so ein Modul besteht:
- aus einem .js (und zwar name.lowercase also bsp. zlib.js)
oder
- aus einem.js und einer lib (.so/.dll) (und zwar "ejs"+name.lowercase)
oder
- aus einer lib

"Problem" js files finden bzw. wo suchen?
bei den libs macht das die libltdl für mich

am besten mache ich vielleicht fs funktionalität von js aus verfügbar
und den ModuleLoader in js
warum?
ich wollte es so machen daß die .js module vor und nach dem laden der lib
was machen können

möglichst wenig native code


also neuer Plan:
1. Scripte laden von C++
2. Scripte laden von JS, da ModuleLoader das dann braucht und zum großen Teil
in JS geschrieben wird?


zum thema eval
seither habe ich das ganze script geladen und dann ausgeführt
bzw. dann wurde es nach ucs2 konvvertiert und dann ausgeführt?
ziemlich bescheuert
jetzt mache ich das mal richtig
--------------------------------------------------------------------------------
also
grad ist mein problem ich rufe Evaluate auf mit NULL als obj
interessant ist auch der jsapi.h Kommentar dazu
wenn der denn noch aktuell ist?


toLower und den "ejs" kram kann ich jetzt aus dem native code entfernen!
kann ich ja jetzt in js machen


Aktuelles Problem:
moduleloader.js muß gefunden werden

1. nicht installiert
=> ist in ejsshell/
2. installiert
=> $DATADIR/ejs

Beste Lösung man muß install machen!
--------------------------------------------------------------------------------
sash anschauen
print modul
--------------------------------------------------------------------------------
ich sollte mir die nomenklatur anschauen - die scheint bei JS etwas
"verworren"
--------------------------------------------------------------------------------
automatic loading of modules? (resolve hook)
reflecting the resolve hook back to js seems to be a bad idea
automatic loading of modules would require the modules to strictly follow
naming convention and to stay in their scope
at the moment this is not true and should be improved anyway

clean-up the module / namespace stuff
a module should if possible only define one object
what about nesting?
--------------------------------------------------------------------------------
derive special exception objects
--------------------------------------------------------------------------------
Hmmm now we have:
"untrusted mode" / runUntrusted / ModuleLoader.disable
at the moment runUntrusted only disables the ModuleLoader which is not
what the name suggests - we probably need some kind of security manager
and perhaps want to use JS API stuff for this
--------------------------------------------------------------------------------
byte arrays: (and string handling)

currently I use strings to represent byte arrays (binary data)
the way I do it I use twice as much memory as needed as js strings are
16bit unicode

I have to take a deep look at this (see also the I18N point)
a related thread on n.p.m.jseng:
http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=9dabmi%24os01%40secnews.netscape.com

also do:
grep -r JS_realloc
grep -r JS_NewString
why?
are JS strings with \0 allowed? yes
or must JS strings be \0 terminated? no?


something about the string stuff:

http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3C45FD50.4050806%40meer.net:
History: JS_GetStringBytes predates Unicode support in the engine, and 
it used to give access to the JSString's underlying char buffer, which 
would live as long as the string did (you couldn't write -- look, don't 
touch!).  With the switch to Unicode, API compatibility had to be 
preserved, but the string's buffer was not a char buffer any longer. 
 Hence the deflated_string_cache (see jsstr.c).  


http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3CD8E4C1.9080007%40meer.net:
>So what does JS_GetStringBytes() return for multibyte characters?  Suppose we had a UCS2 char 0xXXYY, does it just return XX or YY?  Or does it return a sequence of chars for a particular encoding?
>
How would it know what encoding to use?

It clearly just chops (decimates, as I wrote below) from jschar to char, 
so \uXXYY becomes \xYY.


http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3CD79F24.6020903%40meer.net:
>Hi there,
>
>When would one want to use JSVAL_TO_STRING macro vs. JS_ValueToString
>function?
>
The macro untags a jsval into a pointer, so JSVAL_IS_STRING(v) had 
better be true before you call JSVAL_TO_STRING(v).

JS_ValueToString pretty clearly *converts* any value into a string.

I'm not sure why you're having troubles, but I have to ask: why are you 
using JS_GetStringBytes?  It's lossy and deprecated.

/be

Another byte array thread:
http://groups.google.de/groups?th=35ba422a08cd0319


use the byte array in the zlib modul
--------------------------------------------------------------------------------
monitorable functioniert nicht
garbage collector crashed

noch mal InitClass Beispiel suchen :-((
this is fixed?
--------------------------------------------------------------------------------
private data:
there is a API function JS_GetInstancePrivate
unfortunately it does not differentiate between private is null and
class is wrong

i use JS_GET_CLASS to do this
perhaps we really should use JS_GetInstancePrivate
--------------------------------------------------------------------------------
clean up network module - it is really ugly
--------------------------------------------------------------------------------
use streams whenever possible (don't convert to string ...)
f.e. the Base64 encode decode could use a stream

create a native class (derived from std::streambuf) which uses a javascript
object to implement it
--------------------------------------------------------------------------------
improve opengl wrapper
see src/modules/gl/README and TODO
--------------------------------------------------------------------------------
problem: input layer depends on video layer and must be able to exit
why?
input layer gets:
- keys which should always toggle fullscreen
- quit event
- resize event

perhaps this could be done in javascript and with object sealing
=> how does object sealing work? is it possible to use it for security relevant
stuff?
--------------------------------------------------------------------------------
bin am überlegen wegen JS_SealObject und so
evtl. auch meherere contexte / globale objekte oder gar runtimes
ich sollte einen js bereich haben der sicher ist
nur wie integriere ich das in die shell?
--------------------------------------------------------------------------------
video resize wird ganz schwierig
untrusted code soll das nicht koennen
aber trotzdem muß es funktionieren wenn untrusted code läuft!
--------------------------------------------------------------------------------
thread-safety
at the moment we do not use threads directly but:
SDL_mixer does
opengl might

libltdl isn't thread safe

take a look at libesmpt?
perhaps we should use glib or nspr now?
glib: no
we still do not depend upon nspr (but the debian libsmjs is linked against
nspr anyway since it is using JS_THREADSAFE)
--------------------------------------------------------------------------------
OpenGL ES:
http://www.khronos.org/opengles/
http://www.khronos.org/opengles/spec.html
--------------------------------------------------------------------------------
debian package!

check linitian error messages
man pages are missing

perhaps split into platform dep/indep?
we now build 4 packages: ejs, ejs-multimedia, egachine-base, egachine

register mime type (application/egachine ?)

we need:
different SDL_mixer version (see below audio:)
=> compiled statically
different spidermonkey version
(the one in testing has bug 240577)
--------------------------------------------------------------------------------
take a look at <http://g3d-cpp.sourceforge.net/>
--------------------------------------------------------------------------------
different modules (video, gl, svgl) must be able to include gl headers in a 
portable way find a nice solution
--------------------------------------------------------------------------------
wrap svgl DOM objects
basic functionality is there
--------------------------------------------------------------------------------
hmm i have trouble with the nvidia drivers
I use them in 16bit mode, AGP disabled and this works very well
but svgl needs the stencil buffer which is not available in 16bit mode
but in 24bit mode i get creashes and machine lock-ups
seems related to bttv
--------------------------------------------------------------------------------
svgl generates cpp headers automatically from DOM idl via python
we should try to generate wrappers automatically in the same way
--------------------------------------------------------------------------------
hmm svgldom test produces warning:
unknown SVG element rect SVGDocument.cpp:117
fixed: this was due to "bug" in svgl
it assumed that the tagname passed in is a interned string
awaiting reply from Stephane Conersy to this:

i found another problem/bug
createElement either assumes I always intern the string I pass in
(which is not an option for me) or you just missed the *

currently I use this fix:

Index: src/w3c/svg/SVGDocument.cpp
===================================================================
RCS file: /cvsroot/svgl/svgl/src/w3c/svg/SVGDocument.cpp,v
retrieving revision 1.1.1.1
diff -u -r1.1.1.1 SVGDocument.cpp
--- src/w3c/svg/SVGDocument.cpp	22 Jun 2004 12:09:54 -0000	1.1.1.1
+++ src/w3c/svg/SVGDocument.cpp	28 Dec 2004 19:19:33 -0000
@@ -102,7 +102,7 @@
     SVGElement * res=0;
 #if 1
     #define STRDEF(name, value) \
-    if(tagName==SVG##name##Element_element_string) { \
+    if(*tagName==*SVG##name##Element_element_string) { \
       res = new SVG##name##Element(this); \
     } \
     else

--------------------------------------------------------------------------------
JS_ConstructObject vs. JS_NewObject !!
perhaps i should use JS_ConstructObject where i am using JS_NewObject ?!
--------------------------------------------------------------------------------
splitted binary packages
perhaps i should split the source, too? not now
--------------------------------------------------------------------------------
Documentation:

API Docu:
autogenerate docu for javascript stuff?
problematic since JS is "underspecified"

searched for something like doxygen/javadoc/...:
- many projects generate from the javascript source c++ or java source and 
  pass it along to doxygen/javadoc (this aproach has its problems)

jsdoc (http://jsdoc.sourceforge.net/ auch via javadoc)
there was another jsdoc
jsunit
burstlib

Another problem is to generate docu for the wrapped native code

=> perhaps the best solution is to write the docu manually
(how does jsolait generate docu?)
--------------------------------------------------------------------------------
currently loading a (native) module twice is a error / throws an exception
this is probably a bad idea
hmm
either ejs.ModuleLoader.load should remember which modules are already loaded
and simply ignore dupilcate requests or the caller must ensure that modules
aren't loaded twice
the native module loader (native code) already remembers which (native) modules
were loaded => would have nearly duplicate code
but we must be careful since module loading should only be allowed in trusted
mode
--------------------------------------------------------------------------------
fix netorigpong2 using Monitorable

puh
also was ist los
da muesste ich einiges machen und auf jeden fall müssten dann alles monitorable
objects sein - maximal könnte ich es mit dem alten kombinieren wo nur änderungen
existierender properties verschickt werden können
(arrays fallen flach)

probleme waren bei monitorable2.js monitorable3.js aufgetaucht
wegen dem serialisieren mal wieder
sieht so aus als ob ich das doch von hand machen muesste
(sonst werden objekte dupliziert)
die idee war dann einfach das erstellen von monitorable objects abzufangen
und bei dieser gelegenheit mir das zu merken
und dann normal modifikationen an denen zu verschicken
dann muß ich aber immernoch die anderen objekte (nicht monitorable)
serialisieren und die können ja zusammengesetzt sein
=> zurück beim serialisierungsproblem

da ist dann auch das problem ob die selbe id zweimal vvergeben werden kann
und das kann sie wenn ein objekt gc'ed wird
und wie soll ich das mitbekommen?
irgendwie ist das alles pfusch
beim Monitorable object könnte ich nen hook machen

das ganze ist im prinzip ein distributed shared memory system

write summary of javascript deffects/pitfalls:
uneval/toSource and prototype, constructor, __proto__, scope
typeof / instanceof
for in vs. propertyIsEnumerable
local variable arguments in function (strange object)
check wether variable is defined (global object)
byte arrays
some typical c/c++ pitfalls also apply to javascript (-10<x<10) - might be a
problem for beginners not familar with c/c++
--------------------------------------------------------------------------------
hab rumgemacht wegen dem constructor hack
suche noch nach einem schönen weg
s.h. dist.js egachine.js 
was ist das problem?
eigentlich, daß function.name read only ist?

function serialization has got a major problem:
unbound variables
global ones are obvious / and this problem is solved by the
assumption that global unbound variables are the same on server/client
or absichtlich nicht
aber solche sachen sind ein problem:
function bind2nd(f,x){return function(a){return f(a,x);}}

i did not understand the __parent__ stuff at all yet
__parent__ is read-only
__parent__ could be used in native code to chain lookups

the only thing i know of changing parent (at the moment is something like:
js> (function b(){return __parent__;})().toSource()
({b:(function b() {return __parent__;})})

js> (function a(){var i=10;return function b(){__parent__.i=20;return i;}})().__parent__
[object Object]
js> (function a(){var i=10;return function b(){__parent__.i=20;return i;}})().__parent__.__parent__
[object global]
js> (function a(){var i=10;return function b(){__parent__.i=20;return i;}})().__parent__.__parent__.__parent__
[object Object]
js> (function a(){var i=10;return function b(){__parent__.i=20;return i;}})().__parent__.__parent__.__parent__.__parent__
[object global]
js> (function a(){var i=10;return function b(){__parent__.i=20;return i;}})().__parent__.__parent__.__parent__.__parent__.__parent__
null

mal graphviz mit __parent__ machen
--------------------------------------------------------------------------------
bin dabei server neu zu machen
jetzt mit objectwriter
wie mache ich da jetzt die broadcast geschichte?
oder anders wie das ganze?
1. neuer client connected
2. muss dem neuen client alle objekte senden (die bereits gesendet wurden),
   d.h. ich muss den aktuellen zustand herstellen damit ich nachher wieder
   broadcasten kann
3. danach sollte 


monitor geht grad net - vermutlich wegen children array

also geht jetzt mal so wieder
hacks entfernen (dontwatch)
unnötige reste entfernen
step entfernen aus szenengraph

1. beispiel manipuliert szenengraph direkt
2. beispiel benutzt animations-nodes und paint mit zeit
--------------------------------------------------------------------------------
also das mit meinen zwei ObjectWriter streams funktioniert momentan nicht
das this.o[] array ist unterschiedlich
=> sachen werden falsch referenziert

könnte ich evtl. den ObjectWriter oder Reader selbst serialisieren?
ich muß ja auf client seite einen Reader herstellen der im passenden zustand
für den allgemeinen writer auf serer seite ist
warum eigentlich das ganze?
wegen broadcast
wobei ich ja eh keinen echten broadcast mache
außerdem ist es ja eigentlich ein spezialfall, daß man den kompletten
szenengraphen broadcastet

also bin immer noch an netorigpong2.js
habe performance probleme (sogar auf server seite):
dt:50119
collision
(function () {advanceTo(simTime += stepSize);}): 61281
dt:62367
dt:47528
dt:49988
dt:50055
dt:49949
point
(function () {advanceTo(simTime += stepSize);}): 76641
dt:77548
dt:52636
...
dt:50035
New connection: 6
(function () {Net.server.poll(stepSize - dt);}): 1238543
dt:1244831
dt:136670
collision
(function () {advanceTo(simTime += stepSize);}): 61990
dt:74330
dt:54171

dt:49618
New connection: 6
send(6, "00046afunction run(){if (!EGachi"..., 1136, 0) = 1136
send(6, "000003o{}000015eEGachine.r=this."..., 1500, 0) = 1500
send(6, " (!(ret instanceof Monitorable))"..., 1500, 0) = 1500
send(6, "r((function (i) {return m[i].sta"..., 1500, 0) = 1500
send(6, "o__.__proto__ === Object.prototy"..., 1500, 0) = 1500
send(6, "dren:1,0:#45#}},3:{__proto__:#11"..., 1500, 0) = 1500
send(6, "#,size:{__proto__:#100#,x:0.025,"..., 1500, 0) = 1500
send(6, "1100111\", \"111001011001111\", \"10"..., 1500, 0) = 1500
send(6, "#}},12:{__proto__:#117#,c:[1,1,1"..., 249, 0) = 249
(function () {Net.server.poll(stepSize - dt);}): 1040425

=> 
1) new connection ist sack lahm
(er muss halt ein paar k an den client senden
vermutlich blockiert er da auch)
2) point ist lahm
3) collision ist lahm

zu 1)
evtl. doch multi-threading für sockets?
zu 2,3)
collision
(function () {rpval = me.write(pval);}): 53915
(function () {Net.server.objWriter.updateProperty(obj, prop, val);}): 55475
(function () {t[t.length] = v;}): 56935
(function () {advanceTo(simTime += stepSize);}): 68466
dt:69816
...
point
(function () {rpval = me.write(pval);}): 46239
(function () {Net.server.objWriter.updateProperty(obj, prop, val);}): 47717
(function () {t[t.length] = v;}): 48764
(function () {ball.appendMove(time, new LinMover(ballStartPos, ballSpeed));}): 52188

=> ObjectWriter.prototype.write ist das problem

beim ersten walk war der ignore nicht gut
ist jetzt besser => wesentlich schneller
aber halt immernoch etwas lahm
vielleicht sollte ich das nochmal neu schreiben ? ;-)
--------------------------------------------------------------------------------
a profiler would be nice
a debugger   "   "   "
--------------------------------------------------------------------------------
zuletzt habe ich gemacht:

src/egaserver ../egachine/limbo/js/serprofile.js 2>/tmp/log && cmp -s /tmp/log /tmp/log.old || (echo Shit; cat /tmp/log)

=> object serialisierung wollte ich performanter machen

--------------------------------------------------------------------------------
auf client seite ist paint das problem
evtl. szenengraphen compilieren (am einfachsten opengl display list draus
machen)
--------------------------------------------------------------------------------
SVG:
also ich kann ein SVG document anzeigen
allerdings ist das ganze nicht Auflösungsunabhängig und paßt überhaupt nicht
in meinen szenengraph

habe einen maxpect zoom/pan gemacht
--------------------------------------------------------------------------------

also ich wollte jetzt mal ein SVG basiertes menü machen
dazu brauche ich mehr dom objekte
und erneut taucht das problem auf, daß ich ein dom::Element* object bekomme
aber ein spezialisiertes brauche
(in diesem Fall dom::Text)
also 2 möglichkeiten:
	1) in javascript irgendwie casten
	2) das spezialisierte javascript objekt zurückgeben
	=> eine weiche die feststellt was das für ein element ist
	und ein entsprechendes javascript objekt erstellt und zurückgibt
	das geht dann über rtti oder dom::Element->getTagName()

HIER geht es um   svgdocument_getElementById u.a.:
    // now create javascript wrapper object for element
    // TODO: what about polymorphism? shouldn't we create a specialized element?
    // and who is the owner of the native object? gc -> creash
    // perhaps we must map native to js object?
    // or is svgl always the owner of the native object?
--------------------------------------------------------------------------------
war dabei zu schauen wie sowas geht:
groupelem.childNodes.item(cn).setAttribute("transform","rotate("+rot+")");
sprich ob item nicht ein Element anstatt eines Nodes zurückliefern sollte
spec anschauen

und generell habe ich versucht in egachine.in via transform="rotate()" sterne
zu drehen
--------------------------------------------------------------------------------
nochmal generell über javascript dom wrapper nachdenken

war grad dabei zu versuchen das svgtetris zum laufen zu bekommen
--------------------------------------------------------------------------------
fix test for SDL_mixer in configure.ac
--------------------------------------------------------------------------------
declarative SVG animations
integration of SVG into EGachine
--------------------------------------------------------------------------------
überall strutils verwenden bei dom:String <-> JSString konvertierungen
1:1 mapping zw. native und js dom objekten?
clean up todo list
siehe auch spezielle modul todo listen
--------------------------------------------------------------------------------
ejs.exit still sucks
--------------------------------------------------------------------------------
experimental declarative animation support destroyed svgviewer functionality

wollte grad ein svg pong machen
dabei habe ich nen svvg bug entdeckt? 2*setAttribute("transform ....
genug für heut
--------------------------------------------------------------------------------
serialization/deser from client to server (secure without eval, subset
of object literals could also use JSON:
http://jsolait.net/doc/lang.xhtml
--------------------------------------------------------------------------------
auch gut:
http://jan.kollhof.net/projects/svg/examples/index.xhtml

ich glaube ich hab den bug gefunden
das liegt daran daß immer nur transforms angehängt werden
entscheidend scheint mir zu sein:
#0  svg::Attribute<svg::Animated<svg::SVGList<svg::SVGTransform*> > >::getValue (this=0x817b830) at Attribute.hpp:37
#1  0x42aae783 in svg::SVGTransformable::parse_attributes (this=0x0, attrName=@0x42af18e8, attrValue=@0x42af18e8)
    at parseHelper.hpp:115
#2  0x42aaeb2f in svg::SVGPolygonElement::parse_attributes (this=0x817b740, attrName=@0xbfffe5d8, attrValue=@0xbfffe5f4)
    at ElementParseAttributesMethods.cpp:770
#3  0x42a3178a in svg::SVGAttr::setValue (this=0x81868b8, v=0x8212ca8) at SVGDocument.cpp:48
#4  0x42a0943b in dom::Attr::setNodeValue (this=0x42af18e8, value=0x817b844) at Attr.cpp:120
#5  0x42a0f623 in dom::Element::setAttribute (this=0x817b740, name=0x8212c78, value=0x8212ca8) at Element.cpp:199

(gdb) info break
Num Type           Disp Enb Address    What
1   breakpoint     keep y   0x429cd31d in element_setAttribute at ../../../../egachine/src/modules/svgl/ejselement.cpp:111
        breakpoint already hit 9 times
2   breakpoint     keep y   0x42aae739 in svg::SVGTransformable::parse_attributes(unicode::String* const&, unicode::String* const&) at ElementParseAttributesMethods.cpp:684
        breakpoint already hit 3 times

report bug
my "fix" is in parseHelper.hpp:227
vermutlich ist das nicht der einzige bug dieser art



remember:
You must type
  (gdb) print ('Foo::Bar') x

--------------------------------------------------------------------------------

the filter effects do not work?

der macht sowas wie ich?
http://jan.kollhof.net/publications/svgopen2004.html

inkscape
--------------------------------------------------------------------------------
serialization:

the new serialization is quite slow

we now have many different serialization approaches
2 will remain:
- server to clients:
	goal: try to serialize as complete as possible
	(prototypes, sharp variables, ...)
	support "incremental" serialization (later modification)
	distributed object graph
- client to server:
	goal: don't use eval (security)
	use JSON (subset of javascript object literals)
--------------------------------------------------------------------------------

jsolait integration
jsolait adds some functions to standard prototypes?

perhaps use some ideas of jsolait regarding module stuff

both network examples are quite shit at the moment

netpong.js:
- server produces data faster than client is able to consume

netorigpong.js:
- client may produce data faster than server is able to consume
  (many input events)
- timeshift (via keyboard) does not work anymore

--------------------------------------------------------------------------------
perhaps write a JSON c++ bridge a la dope or JSON c++ sigc++
and use it for easy (but slow!) wrapping ?
================================================================================



Performance problems:

- scene graph traversion is quite slow
