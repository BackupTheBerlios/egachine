SECURITY RELATED BUGS:
--------------------------------------------------------------------------------
serialize/deserialize
fast enough? is okay
we will not completely serialize often because we only send
differences => should be fast enough
problem remaining:
deserializing is done with eval
this is okay on client side but not on server side
because CLIENTS SHOULD NOT BE ALLOWED TO RUN CODE ON THE SERVER
=> supply a limited deserialize for the server (a stripped down ObjectLiteral
parser without side effects)
NOTE: NJS JavaScript Interpreter <http://www.njs-javascript.org/> seems to have 
a javascript javascript lexer/parser - sharp variables are missing?
(part of a javascript javascript compiler in the jsc directory)

it seems konqueror uses a bison based parser:
http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=bhaklu%249k22%40ripley.netscape.com:
(the whole thread is interesting)
Well ....
I am satisfied with their work.
I did not yet write JS parser with them so may be it will be more
interesting for you
to talk with Harri.Porten<Harri.Porten@gmx.de> .
He wrote JS parser in Konqueror browser using bison.


clients only send primitive messages to the server
At the moment clients are able to send javascript code to the server
and via the server to the other clients
nice hacking game isn't it?
(theoretically this is not really such a problem since the server does not allow
to do much: no file access, only one outgoing tcp connection
but you can grab a javascript cluster and ...)
--------------------------------------------------------------------------------
spidermonkey bug: assertion in jsarena.c:274 fails
this only happens with the debug build
i posted it to the newsgroup
perhaps only the assert is wrong ;-) ?
see:
http://bugzilla.mozilla.org/show_bug.cgi?id=239721
--------------------------------------------------------------------------------
server network code must be non-blocking (or use threads)
now a client can simply block the server => DOS
--------------------------------------------------------------------------------
client must always be interruptable
=> how to interrupt the interpreter from time to time?
does spidermonkey support this? similar to the GC
(or perhaps use threads)
yes there is some hook
--------------------------------------------------------------------------------
egachine.in: see TODO / BUG
ejsnet.cpp: see todo
--------------------------------------------------------------------------------
are the wrapped libraries secure?
how buggy/safe/secure/trustworthy are opengl/mesa implementations?
SDL_mixer/mikmod?
SDL_image?
--------------------------------------------------------------------------------


OTHER:
--------------------------------------------------------------------------------
error reporting from native code:
be careful with c++ exceptions
c++ exceptions can't be thrown through c-code
(this was true but it seems today the c-compiler handles this?)
anyway we can't throw exceptions in native code called by the interpreter 
since he will not like it

now there is a macro for handling errors EJS_THROW_ERROR
all spidermonkey functions returning JS_FALSE already did set the error
=> simply return JS_FALSE
if you want to generate an error use EJS_THROW_ERROR

at the moment always the same error exception is thrown and the only way
to differentiate between them is the message => really bad
--------------------------------------------------------------------------------
complete scenegraph (color, ...)
wrap remaining video/input functions
--------------------------------------------------------------------------------
perhaps redesign the scene-graph and take advantage of ecmascript features
the current scenegraph is mainly taken from jgachine
--------------------------------------------------------------------------------
watchall does not handle circles?!
i think it does
but it does not handle addition and removal of properties!
--------------------------------------------------------------------------------
somehow remove dontwatch hack
--------------------------------------------------------------------------------
write docu / tutorial
autogenerate docu for javascript stuff?
problematic since underspecified
--------------------------------------------------------------------------------
solve the win32 opengl 1.1 problem
probably use glew
perhaps i should split the opengl wrapper stuff completely out of egachine
there might be some interest in this
on the other side there is already monkeyglobs which seems dead?
now we use ejs and the gl module is seperated enough
--------------------------------------------------------------------------------
FONT STUFF:

currently we have one built in font which is stored in one texture
("bitmap" font - in fact a png grayscale with alpha blending in the moment
at minimum this font should be much nicer - it is very ugly)

ttf fonts:
library shootout:
freetype directly: too much work? => NO
gltt: no freetype2 support => NO
oglft: no deb, seems it wasn't updated for a while? => NO

					SDL_ttf    vs.	ftgl
cross-compile/portability		trivial		simple
features				minimal		many

SDL_ttf uses textures
ftgl can use textures as well as polys

for now we use SDL_ttf (perhaps simpler, often used)
and stay with texture fonts

=> redesign texture handling completely
allow to create textures from text and data

currently creating a texture is coupled with image decompression
=> perhaps change this?
image decompression could become a seperate step
on the other side this perhaps would require some image object
hmm
access to image data is useful
currently one would need to create a texture and then it would
require opengl to get the image data
(=> load image|decompress|load to graka|get from graka
 => stupid)
i want to keep it small and simple
and i don't want to introduce a "hard" dependency on SDL
good design would be a seperate image api / binding
but this fights the keep it small and simple aproach
and it is very unlikely that there will be any other implementation
than the SDL one?
the image api would merely be a SDL_Surface wrapper
perhaps there is already an existing one?
nothing found

hmm ttf fonts are quite huge
but then again if i would supply a unicode bitmap font this 
probably would be much bigger

btw. what about user defined fonts?
ttf fonts supplied by the user are problematic
is freetype secure?
font images wouldn't be problematic

http://www.gameprogrammer.com/polyfonts/polyfonts.html ?
hmm linux only? try to cross-compile it
there is a zip => probably win32, too
does not use freetype

Bob Pendleton wrote:
> So, yes, you can use polyfonts to draw text in an SDL/OpenGL program.
> That is pretty much what I wrote it for. I just happened to have some
> old graphics code floating around so I added the ability to use it with
> *all* SDL surfaces. For my own personal use I have a version where I
> stripped out the sgl library and only support OpenGL.

hmm an end-user friendly choice would be to use system fonts
and let the end-user decide which fonts to use

fonts once again:

It seems there are the following options:
SDL_ttf (uses freetype 1?)
SDL_ttf2 (uses freetype 2?)
polyfonts (no dependencies)
freetype 2 directly
libgltt2 (uses freetype 1)
oglft
ftgl

any missing here?

my requirements:
free software
security?
cross plattform (easily cross compilable)
small
opengl
unicode
--------------------------------------------------------------------------------
win32 timestamp currently only ms precision
--------------------------------------------------------------------------------
report spidermonkey docu "bugs"

JS_NewObject: class pointer may be NULL => Object
FunctionSpec: extra arguments field
--------------------------------------------------------------------------------
fix netpong and netpong2
i removed netpong / netpong2 is now netpong

perhaps complete pong3
--------------------------------------------------------------------------------
supply version information
nearly done
not yet done:
expose opengl version info
(for now you can test for the existance of opengl functions)
currently checkVersion assumes complete downward compatibility and no upward
compatibility
this is of course stupid - and wouldn't require a version number with 3 parts;-)
it should work like this:
micro: script wants 1.0.3 (=> 1.0.5 is okay but 1.0.2 is not)
minor: script wants 1.2.3 (=> 1.4.3 perhaps okay but 1.0.3 is not)
major: script wants 2.2.3 (=> 3.2.3 not okay and 1.2.3 not okay)
=> different majors never ok (perhaps exception 0 instead of 1)
we make no guarantee that this scheme is established until version 1!!
expose spidermonkey/javascript version
--------------------------------------------------------------------------------
write DOCU!
perhaps use jsdoc
--------------------------------------------------------------------------------
allow #!/usr/.../egachine at beginning of scripts
to allow "normal" execution on unix systems
--------------------------------------------------------------------------------
unicode text input does not work yet - and perhaps even is buggy?
--------------------------------------------------------------------------------
redesign input layer?

perhaps rethink the gamepad event design
or the complete input layer?
the idea was to keep it simple
but perhaps someone wants mouse input/analog joy input/..
for now we keep the simple everything is a gamepad
and you can enter some text aproach
sometime in the future:
expose more of the SDL Input stuff
it is more powerful and there will not be any other implementation
in the near future
let user redefine keys
--------------------------------------------------------------------------------
i am not sure if I do create the dll with my mingw cross compiler the right way
do I need -fPIC, too ? no i don't think so - it seems all win32 code generated
by mingw is position independant
do I need the declspec shit and have to use dlltool?
for now I simply compile like I would do on a unix system and it seems to work
--------------------------------------------------------------------------------
serialize:
why so complicated?
toSource can handle graphs
only because of the __proto__ field?
i started a second try in src/examples/misc/ser.js
now using the second serializer
which temporarily renames __proto__ to _p
still not the best solution
--------------------------------------------------------------------------------
client and server should check protocol compatibility/version
--------------------------------------------------------------------------------
kick out the video stuff which only duplicates the gl wrapper
should i keep a subset in Video anyway?
currently examples in client/opengl may use gl. and in client/ itself
the should not use it - otherwise the destinction would be stupid
i think it would be a good idea to have an explicit subset
of course this must be documented
are the scenegraph objects allowed to call gl functions?
nicer would be if they were not
--------------------------------------------------------------------------------
I just found the sdl mingw developer package again
should try if opengl works with it => no need for hacked SDL version?
--------------------------------------------------------------------------------
we often assume that there is only one javascript context
especially in client/video/jsgl
--------------------------------------------------------------------------------
perhaps wrap:
std::streambuf (nearly done in the network part)
std::vector
--------------------------------------------------------------------------------
compression support
we already depend on zlib
done: Zlib.compress and Zlib.decompress
todo: allow files passed on startup to be .gz
--------------------------------------------------------------------------------
do not install all examples
somehow tag the examples which should not get shipped with binaries
the tag is DONTINSTALL in the first line
(done: but only install does use this
todo: crossmake (win32) should use this, too
--------------------------------------------------------------------------------
perhaps preprocess the examples
because the have quite some code in common
=> annoying if this code needs an update
--------------------------------------------------------------------------------
native base64 encode/decode
--------------------------------------------------------------------------------
Attention:
JS_ValueToNumber does not fail if value==undefined
i have to test what happens - i guess NaN (since a double is returned)
and if a NaN double is converted to an int ...
also check warnings
perhaps the simplest method would be to check this in javascript where not
critical
--------------------------------------------------------------------------------
I18N:

charset:
	javascript supports unicode utf16?
	spidermonkey has a "seperate" unicode api?
	now do we really want the script files utf16 encoded? no
	utf8 maybe
	how are unicode strings represented internally by spidermonkey?
	first take a closer look at how this all is meant to work

strings/messages:
	javascript has no special features for translating messages?
	come up with some framework
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
write a spidermonkey embeding "best practice" document"
--------------------------------------------------------------------------------
audio:

In the long run perhaps openal is the way to go.
For now i wanted to use the sound layer of adic (http://adic.berlios.de).
Problem: music playing with SDL_mixer <=1.2.5 only works from files (not RWOps)
In adic there also was a bug with mod playing - the loops were wrong afair.

we currently depend on a CVS version and include it in the egachine package

OpenAL made much advances since last time I tried it.
Really nice
Unfortunately there is no mod support?
and mod is the way to go for egachine since size matters
ogg/mp3's are simply too big
midi would be an option (not really)
one could make a mod like format with openal+javascript
but then there is no editor
an option would be than to convert mods to this format
for now we use SDL_mixer 

other options:
SDL_sound
mikmod directly
there is another mod playing library used optionally by xmms
--------------------------------------------------------------------------------
lsb linux binaries
--------------------------------------------------------------------------------
Game ideas:

use "insecure" server to make a programming game
the server executes all client commands
the client has a javascript "shell" which allows execution of arbitrary commands
the players may program all clients via the server

a game about software patents
choose side: patent lobby, patent opponent, politician
--------------------------------------------------------------------------------
distributed scenegraph:
at the moment only changes to simple properties are distributed
at least missing:
distribute changes to arrays (see watcharray.js in limbo/js)
allow addition of objects to arrays/objects
(this is difficult to get right since the server must remember which objects
where already distributed to the client to keep object relationships
correct - in case objects are shared.
example:
a={x:...}
root={r:a}
distribute(root);
root.b=a; <---

this means we must remember the hash value of all distributed objects and the
remote name (now we get back to the more complex serialization algorithms)

another aproach would be to drop the distributed scenegraph and to use a
"distributed eval" / function to evaluate code on server and clients
of course this would not hide the network stuff verry well and would require
the user to serialize objects as needed => user is forced to think about local
and remote objects
--------------------------------------------------------------------------------
SVG support (direct or indirect via transformation)
decided to use svgl - since it already does what I wanted to do and I
do not have the time to reinvent the wheel
--------------------------------------------------------------------------------
update project description to reflect new focus
--------------------------------------------------------------------------------
kooperation mit den anderen spidermonkey usern wäre auch nicht schlecht
damit nicht alle die selben wrapper schreiben muessen
evtl. simple "plugins" (shared lib mit 1/2 init/deinit funktionen)
--------------------------------------------------------------------------------
meine watch geschichte
also ich mache jetzt ne eigene "klasse" dafür
momentan teste ich das in test
ich werde aufgerufen für add set get und delete => super
jetzt muß ich nur noch irgendwie den/die callback(s) registrierbar machen
watch überladen scheint mir nicht die beste lösung
nur beim constructor übergeben auch nicht (aber es sollte möglich sein)
wie soll so ein callback aussehen? mehrere funktionen oder eine mit einem
entsprechenden parameter?
einer oder mehrere callbacks?
mehrere sollten möglich sein => mehrere
vielleicht so:
o=Test(); 
brauche noch nen namen:
WatchedObject
ProxyObject - nee
MonitoredObject
WatchableObject
Watchable
Monitorable
MonitorableObject


o.onAdd=function(p,v)
o.onDel=function(p)
o.onGet=function(p,v)
o.onSet=function(p,o,n)

oder
o.watch({onAdd:func....,onSet:func....});
evtl.
o.watchAll({onAdd:func....,onSet:func....});
o.monitor={onAdd:func....,onSet:func....};


okay
wo war ich

ich mach grad ewig rum wegen der exception kacke
wollte eine exception "ableiten" von error
aber das ist alles irgendwie kacke
und alles nur weil onAdd auch das Hinzufügen von
properties verhindern können soll
:-((

wie mache ich weiter?
evtl. erstmal buch beschaffen?
ecma-262 ausdrucken?
dann nochmal in ruhe .constructor .__parent__
.__proto__
usw. anschauen
???
alles kacke

js2 ist auch scheiße da xpcom
ngs-js ist tot?
--------------------------------------------------------------------------------
ich war gerade dabei einen javascript objekt-graphen visualisierer zu schreiben
welches visualisierungstool?
tulip?
springgraph? ist anscheinend ungeeignet (benutzt .dot von graphviz)
vielleicht svg? nee zuviel act

benutze jetzt graphviz (dot) funktioniert soweit ganz gut
muß ich nur noch in brauchbare form bringen
beispiele evtl. eine html seite dazu
funktioniert nicht mit smjs
=> brauche eine eigene shell (wegen hashObject)

--------------------------------------------------------------------------------
Eine Shell:

jetzt habe ich schon egaserver egachine egares
ansich wäre eine shell mit einem befehl zum plugin nachladen und einem befehl
zum Ausführen von Script Dateien am Besten
aber es muß sicher sein => befehl der den plugin ladebefehl sicher abschaltet
befehl um js skripte auszuführen
befehl der noch genau ein js skript ausführt

plugin interface überlegen (C/C++ und JS)

JS:
dlopen(libname)
EvaluateScript()

// ab da geht dlopen und EvaluateScript nicht mehr - danach ist der context
// aber auch untrusted => evtl. problem beim deinitialisieren
EvaluateUntrustedScript() 

was ist import in JS?
was kann die smjs shell?

=> gescheiten C++ streambuf wrapper schreiben

C/C++:
lib initialisieren
javascript objekte registrieren (entfernen?)
lib deinitialieren (reihenfolge?)

was benutzen?
libtldl - wahrscheinlich schon - schön klein
glib? eher nein

evtl. noch schauen wie es die anderen machen (möglichst programme die es
auf vielen plattformen gibt)
--------------------------------------------------------------------------------
war gerade dabei plugin geschichte zu implementieren (example plugin)

was fehlt ist schlecht?
JS:
PluginLoader.xxx macht noch nix
plugins und LD_LIBRARY_PATH bzw. pfade allgemein
für win32 testen
mit abhängigkeiten testen
ansonsten abhängigkeiten evtl. in JS regeln

das geht jetzt:
echo "PluginLoader.load('example');if (example()) PluginLoader.load('example');"|./ejs


problem: plugins unloaden
das kann ich nicht wirklich machen
geht erst nach spidermonkey shutdown => keine JS functionen dafür
--------------------------------------------------------------------------------
wollte testen ob die libtool geschichte auch mit win geht
problem: libtool will autoconf?
mal sehen
libtool kann man auch ohne autoconf benutzen

--------------------------------------------------------------------------------
kann momentan nicht gegen cross compilierte spidermonkey lib linken?
(zumindest smjs.exe nicht)
nur wenn DEBUG=1 ! todo: warum?
--------------------------------------------------------------------------------

große scheiße win DLL's dürfen anscheinend keine undefined symbols
haben - aber anscheinend gibt es abhilfe:
http://www.belgeler.org/autobook/autobook-DLLs-with-Libtool.html: 

"All of the symbols required by a dll at runtime, must be resolved at
 link time. With some creative use of import libraries, it is usually
 possible to work around this shortcoming, but it is easy to forget
 this limitation if you are developing on a modern system which has
 lazy symbol resolution. Be sure to keep it at the back of your mind
 if you intend to have your package portable to Windows."

vielleicht ist es am einfachsten wenn ich unter win zwar auch libtool verwende
aber das so mache, daß wohl die libs gleich gelinkt werden

oder ich mach die libs eben self contained!

alles kacke haut irgendwie nicht so recht hin
=> ich muß erstmal einen kleinen test machen
--------------------------------------------------------------------------------
We don't use libtool we only use libltdl with "native" libs (non-libtool libs)

todo bei make und crossmake: libltdl bauen und benutzen

zlib modul ist nicht self-contained
überall plugin in modul umbenennen? ja
bei python bsp.: paket python-gtk2: contains modules that allow you to use...

--------------------------------------------------------------------------------
MERKE: libtool+mingw+dll+ltdl suckt momentan => nur mingw+ltdl
TODO: was ist der bug in libtool? - evtl. in neuerer vers. behoben?

MERKE: libltdl macht den prefix nur bei libtoll libs (.la)
--------------------------------------------------------------------------------
ich wollte modul geschichte evtl. anders machen
vielleicht nur eine function via dlsym holen
in der function eine struct füllen
(vielleicht problematisch mit dll-geschichten, da könnten die addressen nicht
stimmen

jedes modul soll außerdem ein script haben können
(optional)
evtl. auch module die nur aus einem script bestehen
--------------------------------------------------------------------------------
okay soweit
jetzt muß ich noch testen ob es unter win auch geht!
jop geht
ABER:
hmm cross compiling the modules results in large dlls
probably because libstdc++ is linked in statically
=> compile mingw with shared libstdc++
--------------------------------------------------------------------------------
the zlib wrapper module should not be called zlib.dll
at least jszlib.dll or perhaps ejszlib.dll
--------------------------------------------------------------------------------
convert all wrappers to modules
treat the module loader as module itself (as far as possible ;-)
--------------------------------------------------------------------------------
nochmal die context geschichten anschauen
vielleicht kann ich das ja doch gebrauchen
--------------------------------------------------------------------------------
PLAN:

also ModuleLoader soll ja scripte laden können
=> 1. Scripte laden von C++

was ist das problem?
in Javascript will ich machen:
ModuleLoader.load("Zlib")
evtl. mit lazy resolver:
Zlib.compress lädt automatisch das Zlib module

so ein Modul besteht:
- aus einem .js (und zwar name.lowercase also bsp. zlib.js)
oder
- aus einem.js und einer lib (.so/.dll) (und zwar "ejs"+name.lowercase)
oder
- aus einer lib

"Problem" js files finden bzw. wo suchen?
bei den libs macht das die libltdl für mich

am besten mache ich vielleicht fs funktionalität von js aus verfügbar
und den ModuleLoader in js
warum?
ich wollte es so machen daß die .js module vor und nach dem laden der lib
was machen können

möglichst wenig native code


also neuer Plan:
1. Scripte laden von C++
2. Scripte laden von JS, da ModuleLoader das dann braucht und zum großen Teil
in JS geschrieben wird?


zum thema eval
seither habe ich das ganze script geladen und dann ausgeführt
bzw. dann wurde es nach ucs2 konvvertiert und dann ausgeführt?
ziemlich bescheuert
jetzt mache ich das mal richtig
--------------------------------------------------------------------------------
also
spidermonkey kann auch aus nem FILE* lesen
sollte weniger speicher verbrauchen
(es wird nicht das ganze file in den speicher gelesen und dann erst ausgeführt
und die Konvertierung nach unicode findet erst statt wenn nötig)
jsscan.c:343: ubuf[i] = (jschar) (unsigned char) cbuf[j];
--------------------------------------------------------------------------------
we should use one eval from file and do character conversion if neccessary
--------------------------------------------------------------------------------

also
grad ist mein problem ich rufe Evaluate auf mit NULL als obj
interessant ist auch der jsapi.h Kommentar dazu
wenn der denn noch aktuell ist?


toLower und den "ejs" kram kann ich jetzt aus dem native code entfernen!
kann ich ja jetzt in js machen


Aktuelles Problem:
moduleloader.js muß gefunden werden

1. nicht installiert
=> ist in ejsshell/
2. installiert
=> $DATADIR/ejs

Beste Lösung man muß install machen!
--------------------------------------------------------------------------------
build funktionierte gerade nicht wegen VERBOSE / SILENT drecks bash kram



nochmal libtool:
evtl. muss ich nur -no-undefined hinzufuegen!

ja fuck dann geht es !!!
=> doch wieder libtool benutzen !!

dann am besten auch gleich autoconf/automake

bin dabei wieder automake zu benutzen
--------------------------------------------------------------------------------
autoconf/libtool:
i only want pic objects if they are only used for modules
--------------------------------------------------------------------------------
also
autoconf suckt

suche mal ersatz

cons (perl basiert):
- keine parallelen builds?
- tot?

cook

jam

scons (python):
+ anscheinend verbesserung von cons
- langsam?
- cross compile?
+ ansich ganz nett
 
ant (java basiert):
hmm

--------------------------------------------------------------------------------
problem mit automake war das jsautocfg.h nicht rechtzeitig generiert wird

--------------------------------------------------------------------------------
sash anschauen
print modul
spidermonkey configure check
--------------------------------------------------------------------------------
test javascript modules
--------------------------------------------------------------------------------
ich sollte mir die nomenklatur anschauen - die scheint bei JS etwas
"verworren"
--------------------------------------------------------------------------------
cross compile
--------------------------------------------------------------------------------
automatic loading of modules? (resolve hook)
--------------------------------------------------------------------------------
debian package
--------------------------------------------------------------------------------
merke: debian spidermonkey benutzt nspr
--------------------------------------------------------------------------------
derive special exception objects
--------------------------------------------------------------------------------
Hmmm now we have:
"untrusted mode" / runUntrusted / ModuleLoader.disable
at the moment runUntrusted only disables the ModuleLoader which is not
what the name suggests - we probably need some kind of security manager
and perhaps want to use JS API stuff for this
--------------------------------------------------------------------------------
byte arrays: (and string handling)

currently I use strings to represent byte arrays (binary data)
the way I do it I use twice as much memory as needed as js strings are
16bit unicode

I have to take a deep look at this (see also the I18N point)
a related thread on n.p.m.jseng:
http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=9dabmi%24os01%40secnews.netscape.com

also do:
grep -r JS_realloc
grep -r JS_NewString
why?
are JS strings with \0 allowed? yes
or must JS strings be \0 terminated? no?


something about the string stuff:

http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3C45FD50.4050806%40meer.net:
History: JS_GetStringBytes predates Unicode support in the engine, and 
it used to give access to the JSString's underlying char buffer, which 
would live as long as the string did (you couldn't write -- look, don't 
touch!).  With the switch to Unicode, API compatibility had to be 
preserved, but the string's buffer was not a char buffer any longer. 
 Hence the deflated_string_cache (see jsstr.c).  


http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3CD8E4C1.9080007%40meer.net:
>So what does JS_GetStringBytes() return for multibyte characters?  Suppose we had a UCS2 char 0xXXYY, does it just return XX or YY?  Or does it return a sequence of chars for a particular encoding?
>
How would it know what encoding to use?

It clearly just chops (decimates, as I wrote below) from jschar to char, 
so \uXXYY becomes \xYY.


http://www.google.de/groups?hl=de&lr=&ie=UTF-8&selm=3CD79F24.6020903%40meer.net:
>Hi there,
>
>When would one want to use JSVAL_TO_STRING macro vs. JS_ValueToString
>function?
>
The macro untags a jsval into a pointer, so JSVAL_IS_STRING(v) had 
better be true before you call JSVAL_TO_STRING(v).

JS_ValueToString pretty clearly *converts* any value into a string.

I'm not sure why you're having troubles, but I have to ask: why are you 
using JS_GetStringBytes?  It's lossy and deprecated.

/be

Another byte array thread:
http://groups.google.de/groups?th=35ba422a08cd0319


use the byte array in the zlib modul
--------------------------------------------------------------------------------
monitorable functioniert nicht
garbage collector crashed

noch mal InitClass Beispiel suchen :-((
--------------------------------------------------------------------------------
habe jetzt std::streambuf gewrapped (allerdings wie immer string dreck...)
brauche endlich byte array ;-)

jetzt wollte ich den socket stream richtig machen
die frage ist ob das std c++ interface dafür überhaupt taugt, da ich
ja non-blobking io machen wollte
anscheind soll man über showmanyc gehen 

aber am besten wäre wohl doch ein select...
aber den stream wrapper kann ich ja trotzdem benutzen ...
--------------------------------------------------------------------------------
private data:
there is a API function JS_GetInstancePrivate
unfortunately it does not differentiate between private is null and
class is wrong

i use JS_GET_CLASS to do this
--------------------------------------------------------------------------------
clean up network modul - it is really ugly
--------------------------------------------------------------------------------
use streams whenever possible (don't convert to string ...)
f.e. the Base64 encode decode could use a stream

create a native class (derived from std::streambuf) which uses a javascript
object to implement it
--------------------------------------------------------------------------------
new network stream stuff:
how to detect errors?
at the moment we use blocking i/o => when read does return an empty string
we are at eof/eos

clean up new egaserver
perhaps this should only be a module => no executable script?
btw. how will i do this on win32?
--------------------------------------------------------------------------------
improve opengl wrapper
see src/modules/gl/README
--------------------------------------------------------------------------------
dlopen und nvidia opengl wird trouble machen?
etl. gegen pthread linken (oder LD_PRELOAD) oder....
s.h.: /usr/share/doc/nvidia-glx/README.gz
hmm anscheinend gehts
--------------------------------------------------------------------------------
i should reduce namespace polution and clutter

namens kacke
stdin,stdout,... sind in Stream :-(((
nicht sehr schön
--------------------------------------------------------------------------------
don't link everything against libz
--------------------------------------------------------------------------------
problem: input layer depends on video layer and must be able to exit
why?
input layer gets:
- keys which should always toggle fullscreen
- quit event
- resize event

perhaps this could be done in javascript and with object sealing
=> how does object sealing work? is it possible to use it for security relevant
stuff?
--------------------------------------------------------------------------------
bin am überlegen wegen JS_SealObject und so
evtl. auch meherere contexte / globale objekte oder gar runtimes
ich sollte einen js bereich haben der sicher ist
nur wie integriere ich das in die shell?
--------------------------------------------------------------------------------
video resize wird ganz schwierig
untrusted code soll das nicht koennen
aber trotzdem muß es funktionieren wenn untrusted code läuft!
--------------------------------------------------------------------------------
libmcrypt kann ich von lernen
libtool+threads und optional compilierte module !
hmm anscheinend doch nicht was threads angeht
error functionen werden abgeschalten und die anderen weitergereicht
aber optional module bauen sollte da schön sein
und alternativ statisch linken auch
--------------------------------------------------------------------------------
thread-safety
at the moment we do not use threads directly but:
SDL_mixer does
opengl might

libltdl isn't thread safe

take a look at libesmpt?
perhaps we should use glib or nspr now?
--------------------------------------------------------------------------------
OpenGL ES:
http://www.khronos.org/opengles/
http://www.khronos.org/opengles/spec.html
--------------------------------------------------------------------------------
debian package!

check linitian error messages
man pages are missing

perhaps split into platform dep/indep
register mime type (application/egachine ?)
perhaps use an extra package for ejs
and perhaps seperate packages for some module
(especially the modules which depend on SDL => lots of deps)

we need:
different SDL_mixer version (see below audio:)
=> compiled statically
different spidermonkey version
(the one in testing has bug 240577)
--------------------------------------------------------------------------------
build stuff:

--disable-module does not work yet
--------------------------------------------------------------------------------
okay
modules can now be linked statically
the version with static modules is: 959K
the version with dynamic modules is: 1,3M

libtool dependency tracking is shit since it always links against all libs
(which isn't required on linux)
why is this shit?
for example you link against SDL (which depends on many other libs)
now you could replace this SDL with another one (with minimalistic dependencies)
=> your program should now have minimalistic dependencies, too
but no - libtool linked against every lib ....
--------------------------------------------------------------------------------
take a look at <http://g3d-cpp.sourceforge.net/>
--------------------------------------------------------------------------------
different modules (video, gl, svgl) must be able to include gl headers in a 
portable way find a nice solution
--------------------------------------------------------------------------------
wrap svgl DOM objects
--------------------------------------------------------------------------------
hmm i have trouble with the nvidia drivers
I use them in 16bit mode, AGP disabled and this works very well
but svgl needs the stencil buffer which is not available in 16bit mode
but in 24bit mode i get creashes and machine lock-ups
it seems related to the lirc kernel module?
--------------------------------------------------------------------------------
svgl generates cpp headers automatically from DOM idl via python
we should try to generate wrappers automatically in the same way
--------------------------------------------------------------------------------
DOM:
hmm riesig
brauchbares subset auswählen
--------------------------------------------------------------------------------
hmm svgldom test produces warning:
unknown SVG element rect SVGDocument.cpp:117
--------------------------------------------------------------------------------
