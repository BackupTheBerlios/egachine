#!/usr/bin/perl

# perl script generating opengl wrapper
# this script is called by jsgl_gen !!

print "/* DO NOT EDIT THIS FILE - it is generated by jsgl_gen */\n";

my $ifdefstarted=0;

while (<STDIN>) {
  if (/^\/\* ([0-9])\.([0-9]) functions \*\//) {
    # comment marking opengl version since these functions are defined
    print "#endif\n" if $ifdefstarted;
    print "#ifdef GL_VERSION_$1_$2\n";
    $ifdefstarted=1;
  }elsif (/^GLAPI (.*)GLAPIENTRY (.*) \((.*)\)/) {
    $ret=$1;
    $x=$/;
    $/=" ";
    chomp $ret;
    $/=$x;
    $fname=$2;
    $params=$3;
    my @p=split /, /,$params;
    $nump=$#p+1;
    # handle special case of "one " ( void ) argument => no arguments
    $nump=0 if (($nump == 1)&&(@p[0] eq "void"));

    if ($nump) {
      for (my $i=0; $i<$nump;++$i) {
	die unless ($p[$i]=~/(.*) (.*)/);
	my @q = ($1,$2);
	$p[$i]=\@q;
      }
    }


    #  $xmlout=true;
    if ($xmlout) {
      # generate xml output
      print "<function ret=\"$ret\" name=\"$fname\" args=\"$nump\"";
      if ($nump) {
	print ">\n";
	for ($i=0; $i<$nump;++$i) {
	  $t=$p[$i][0];
	  $n=$p[$i][1];
	  print "<arg num=\"$i\" type=\"$t\" name=\"$n\" />\n";
	}
	print "</function>\n";
      }else{
	print "/>\n";
      }
    }else{
      # wrapper functions for spidermonkey 
      my $difficult=0;
      if ($nump) {
	for ($i=0; $i<$nump;++$i) {
	  $t=$p[$i][0];
	  $n=$p[$i][1];
	  if ($t=~/\*/) {
	    # pointers are difficult
	    if ($fname=~/.*([0-9])([a-z]?[a-z])v/) {
	      # some opengl functions encode the size of the expected
	      # array into the function name
	      $count=$1;
	      $p[$i][0]=~s/\*//;
	      $p[$i][2]=$count;
	    }elsif ($fname=~/.*Matrix[fd]/) {
	      # opengl matrix is [16]
	      $p[$i][0]=~s/\*//;
	      $p[$i][2]=16;
	    }else{
	      $difficult=true;
	    }
	  }
	}
      }
      if ($difficult) {
	print "/* TODO: $fname */\n";
      }else{
	$cname="js_$fname";
	$jsname=$fname;
	$jsname=~s/glu?//;
	print "{\"$jsname\",$cname,$nump,0,0},\n";
      }
    }
  }
}
print "#endif\n" if $ifdefstarted;
