/* DO NOT EDIT THIS FILE - it is generated by jsgl_gen */
/* TODO: gluBeginCurve */

/* TODO: gluBeginPolygon */

/* TODO: gluBeginSurface */

/* TODO: gluBeginTrim */

/* TODO: gluBuild1DMipmapLevels */

/* TODO: gluBuild1DMipmaps */

/* TODO: gluBuild2DMipmapLevels */

/* TODO: gluBuild2DMipmaps */

/* TODO: gluBuild3DMipmapLevels */

/* TODO: gluBuild3DMipmaps */

/* TODO: gluCheckExtension */

/* TODO: gluCylinder */

/* TODO: gluDeleteNurbsRenderer */

/* TODO: gluDeleteQuadric */

/* TODO: gluDeleteTess */

/* TODO: gluDisk */

/* TODO: gluEndCurve */

/* TODO: gluEndPolygon */

/* TODO: gluEndSurface */

/* TODO: gluEndTrim */

ECMA_BEGIN_FUNC (js_gluErrorString)
{
  ECMA_CHECK_NUM_ARGS (1);
  assert (cx == ECMAScript::cx);
  GLenum error;
  if (!ecma_to_GLenum (argv[0], error))
    ECMA_ERROR ("argument 0 has wrong type");
  const GLubyte *nres = gluErrorString (error);
  if (!ecma_from_const_GLubyte_ptr (nres, rval))
    ECMA_ERROR ("could not convert result of type const GLubyte *");
  return JS_TRUE;
}

/* TODO: gluGetNurbsProperty */

ECMA_BEGIN_FUNC (js_gluGetString)
{
  ECMA_CHECK_NUM_ARGS (1);
  assert (cx == ECMAScript::cx);
  GLenum name;
  if (!ecma_to_GLenum (argv[0], name))
    ECMA_ERROR ("argument 0 has wrong type");
  const GLubyte *nres = gluGetString (name);
  if (!ecma_from_const_GLubyte_ptr (nres, rval))
    ECMA_ERROR ("could not convert result of type const GLubyte *");
  return JS_TRUE;
}

/* TODO: gluGetTessProperty */

/* TODO: gluLoadSamplingMatrices */

ECMA_BEGIN_VOID_FUNC (js_gluLookAt)
{
  ECMA_CHECK_NUM_ARGS (9);
  assert (cx == ECMAScript::cx);
  GLdouble eyeX;
  if (!ecma_to_GLdouble (argv[0], eyeX))
    ECMA_ERROR ("argument 0 has wrong type");
  GLdouble eyeY;
  if (!ecma_to_GLdouble (argv[1], eyeY))
    ECMA_ERROR ("argument 1 has wrong type");
  GLdouble eyeZ;
  if (!ecma_to_GLdouble (argv[2], eyeZ))
    ECMA_ERROR ("argument 2 has wrong type");
  GLdouble centerX;
  if (!ecma_to_GLdouble (argv[3], centerX))
    ECMA_ERROR ("argument 3 has wrong type");
  GLdouble centerY;
  if (!ecma_to_GLdouble (argv[4], centerY))
    ECMA_ERROR ("argument 4 has wrong type");
  GLdouble centerZ;
  if (!ecma_to_GLdouble (argv[5], centerZ))
    ECMA_ERROR ("argument 5 has wrong type");
  GLdouble upX;
  if (!ecma_to_GLdouble (argv[6], upX))
    ECMA_ERROR ("argument 6 has wrong type");
  GLdouble upY;
  if (!ecma_to_GLdouble (argv[7], upY))
    ECMA_ERROR ("argument 7 has wrong type");
  GLdouble upZ;
  if (!ecma_to_GLdouble (argv[8], upZ))
    ECMA_ERROR ("argument 8 has wrong type");
  gluLookAt (eyeX, eyeY, eyeZ, centerX, centerY, centerZ, upX, upY, upZ);
  return JS_TRUE;
}

/* TODO: gluNextContour */

/* TODO: gluNurbsCallback */

/* TODO: gluNurbsCallbackData */

/* TODO: gluNurbsCallbackDataEXT */

/* TODO: gluNurbsCurve */

/* TODO: gluNurbsProperty */

/* TODO: gluNurbsSurface */

ECMA_BEGIN_VOID_FUNC (js_gluOrtho2D)
{
  ECMA_CHECK_NUM_ARGS (4);
  assert (cx == ECMAScript::cx);
  GLdouble left;
  if (!ecma_to_GLdouble (argv[0], left))
    ECMA_ERROR ("argument 0 has wrong type");
  GLdouble right;
  if (!ecma_to_GLdouble (argv[1], right))
    ECMA_ERROR ("argument 1 has wrong type");
  GLdouble bottom;
  if (!ecma_to_GLdouble (argv[2], bottom))
    ECMA_ERROR ("argument 2 has wrong type");
  GLdouble top;
  if (!ecma_to_GLdouble (argv[3], top))
    ECMA_ERROR ("argument 3 has wrong type");
  gluOrtho2D (left, right, bottom, top);
  return JS_TRUE;
}

/* TODO: gluPartialDisk */

ECMA_BEGIN_VOID_FUNC (js_gluPerspective)
{
  ECMA_CHECK_NUM_ARGS (4);
  assert (cx == ECMAScript::cx);
  GLdouble fovy;
  if (!ecma_to_GLdouble (argv[0], fovy))
    ECMA_ERROR ("argument 0 has wrong type");
  GLdouble aspect;
  if (!ecma_to_GLdouble (argv[1], aspect))
    ECMA_ERROR ("argument 1 has wrong type");
  GLdouble zNear;
  if (!ecma_to_GLdouble (argv[2], zNear))
    ECMA_ERROR ("argument 2 has wrong type");
  GLdouble zFar;
  if (!ecma_to_GLdouble (argv[3], zFar))
    ECMA_ERROR ("argument 3 has wrong type");
  gluPerspective (fovy, aspect, zNear, zFar);
  return JS_TRUE;
}

/* TODO: gluPickMatrix */

/* TODO: gluProject */

/* TODO: gluPwlCurve */

/* TODO: gluQuadricCallback */

/* TODO: gluQuadricDrawStyle */

/* TODO: gluQuadricNormals */

/* TODO: gluQuadricOrientation */

/* TODO: gluQuadricTexture */

/* TODO: gluScaleImage */

/* TODO: gluSphere */

/* TODO: gluTessBeginContour */

/* TODO: gluTessBeginPolygon */

/* TODO: gluTessCallback */

/* TODO: gluTessEndContour */

/* TODO: gluTessEndPolygon */

/* TODO: gluTessNormal */

/* TODO: gluTessProperty */

/* TODO: gluTessVertex */

/* TODO: gluUnProject */

/* TODO: gluUnProject4 */
