#!@bindir@/ejs
/*
 * Copyright (C) 2004 Jens Thiele <karme@berlios.de>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!
  \brief egachine client
  \author Jens Thiele
*/

ejs.ModuleLoader.load("EGachine");
ejs.config.Video.getResource=function(resname){return EGachine.getResource(resname);};
ejs.ModuleLoader.load("Video");
ejs.config.Input={
  toggleFullscreen:function(){Video.toggleFullscreen();},
  exit:function(res){EGachine.exit(res);}
};
ejs.ModuleLoader.load("Input");
ejs.config.Audio.getResource=ejs.config.Video.getResource;
ejs.ModuleLoader.load("Audio");
ejs.ModuleLoader.load("Stream");
ejs.ModuleLoader.load("Net");
ejs.config.sg={Video:Video};
ejs.ModuleLoader.load("sg");
ejs.ModuleLoader.load("gl");
ejs.ModuleLoader.load("Timer");
ejs.ModuleLoader.load("Base64");
var useSVG=true;

EGachine.onExit=[];
EGachine.version=new EGachine.Version("@PACKAGE_VERSION@");
EGachine.client=true;

EGachine.exit=function(res){
  for (i=0;i<EGachine.onExit.length;++i)
    EGachine.onExit[i](res);
  ejs.exit(res);
};

EGachine.connectDialog=function(host,port){
  if (!host) host="localhost";
  if (!port) port=ejs.config.EGachine.port;
  
  // input field
  function InputField(text,maxlen)
  {
    this.maxlen=maxlen;
    this.done=false;
    this.text=text;
    // register member function as callback => bind member function
    Input.handleChar=function(obj){return function(c){obj.handleChar(c);}}(this);
    Input.charMode(true);
  };
  
  InputField.prototype.handleChar=function(c){
    //  print(c.charCodeAt(0));
    switch(c) {
      case "\u0000":
      break;
      case "\u0008":
      // delete
      this.text=this.text.substring(0,this.text.length-1);
      break;
      case "\u000D":
      // enter
      this.done=true;
      break;
      default:
      if (this.text.length<this.maxlen)
	this.text=this.text+c;
    }
  };
  
  function connect(host,port) {
    // TODO: we assume 1.333:1, restore settings
    // BUG: not all characters are displayed by current video
    // backend !!!
    // this could be a security problem!!
    // example: connect to sicher.de but really connect to
    // öööösicher.de

    if (useSVG) {
      //      var svgstream=File.read("/home/jens/develop/Diplomarbeit/egachine/limbo/egachine.svg");
      //      Stream.stderr.write("avail: "+svgstream.inAvailable());
      //      svgstream.readAll();
      var svgdoc=new svgl.SVGDocument(EGachine.getResource("egachine.svg").decode());
      svgl.selectDocument(svgdoc);
      var textelem=svgdoc.getElementById("textinput").childNodes.item(0);
      /*
      var groupelem=svgdoc.getElementById("starGroup1");
      var rot=0;
      */
    }

    var sx=1+1/3,sy=1;
    var i;
    var welcome="    Welcome to EGachine "+EGachine.version.string+"    ";
    var constr="Connect to";
    var s=welcome+"\n\n"+constr;
    Video.setViewportCoords({left:0,right:sx,bottom:0,top:sy});
    // todo: shit
    var maxlen=Math.max(welcome.length,constr.length);
    var inputField=new InputField(host+":"+port,maxlen-(useSVG ? 4 : 0));
    
    i=0.01;
    var start=Timer.getTimeStamp();
    var last=start;
    var dt;
    var blink=true;
    var blinkStamp=last;
    while (!inputField.done) {
      now=Timer.getTimeStamp();
      dt=(now-last)/1000000.0;
      last=now;

      if (now-blinkStamp>300000) {
	blinkStamp=now;
	blink=!blink;
      }

      if (useSVG) {
	// todo: this is shit since it assumes whitespace \u0020 is
	// half as wide as "_"
	// is there no inverse white space ("blackspace") in unicode?
	// i tried many alternatives somewhere around \u2000 (2001 and 2003?)
	// it seems the common fonts don't support those characters?
	// update: now "fixed" by not using text-anchor:middle
	textelem.nodeValue=inputField.text+ (blink ? "_" : "  ");
	/*
	rot+=dt/5;
	for (cn=0;cn<4;++cn)
	  if ((groupelem.childNodes.item(cn))&&(groupelem.childNodes.item(cn).setAttribute))
	    groupelem.childNodes.item(cn).setAttribute("transform","rotate("+rot+")");
	*/
	gl.Clear(GL_COLOR_BUFFER_BIT|GL_STENCIL_BUFFER_BIT);
	svgl.display(svgdoc);
      }else{

	if (i<sx/maxlen) i+=dt/50;
	Video.clear();

	Video.pushMatrix();
	Video.translate(sx/2,3/4*sy);
	Video.scale(i,i*1.3);
	Video.drawText(s,true);
	Video.translate(0,-3);
	
	Video.pushMatrix();
	Video.translate(0,0.5);
	Video.pushColor();
	Video.drawRectangle(inputField.text.length+2+0.1,1+0.1);
	Video.setColor(0.3,0.3,0.3);
	Video.drawRectangle(inputField.text.length+2,1);
	Video.popColor();
	Video.popMatrix();
	
	Video.drawText(inputField.text,true);
	
	if (blink) {
	  Video.pushMatrix();
	  Video.translate(inputField.text.length/2,0);
	  Video.drawText("_");
	  Video.popMatrix();
	}
	
	Video.translate(0,-1);
	Video.drawText("\n\n\npress escape to quit",true);
	Video.popMatrix();
      };
      Video.swapBuffers();
      Timer.uSleep(20000);
      Input.poll();
    }
    if (useSVG) {
      // restore GL state
      Video.setViewportCoords({left:0,right:sx,bottom:0,top:sy});
      gl.LoadIdentity();
      gl.ClearColor(0,0,0,1);
      gl.Clear(GL_COLOR_BUFFER_BIT|GL_STENCIL_BUFFER_BIT);
    }

    Input.charMode(false);
    var hp=inputField.text.split(":",2);
    host=hp[0];
    port=hp[1];

    // TODO: in the moment we don't handle errors
    // we should print an error message
    stream=Net.connect(host,port);
  };

  function readMsg()
  {
    var len=Number("0x"+stream.read(6));
    var msg=stream.read(len);
    eval(msg);
  };

  try{
    connect(host,port);
    ejs.enterUntrusted();
    while (true) readMsg();
  }catch(error){
    function println(x){
      Stream.stdout.write(x+"\n");
    };
    
    println(error);
    println("Stack:");
    println(error.stack);
  };
};

//! register function to be called each step in time
/*!
  \note if stepSize is 0 or undefined f is called as often as
  possible / useful
*/
EGachine.step=function(f,stepSize) {
  // todo: for now we always ignore stepSize
  EGachine._step=f;
};

(function(){
  var refreshRate;

  addResources();
  //Audio.playMusic("...");

  //! try to detect refresh rate of graphics card/display
  /*!
    \todo: currently assumes swapBuffers is synchronized
    in fact this function is used to detect this
  */
  function detectRefreshRate()
  {
    var start,last,now,frames=0,dt,avg,ret,fdt,mindt,maxdt;

    function swap() {
      Video.clear();
      gl.Flush();
      gl.Finish();
      Video.swapBuffers();
    }

    start=last=Timer.getTimeStamp();
    while (last-start<1000000) {
      swap();
      now=Timer.getTimeStamp();
      dt=now-last;
      last=now;
      ++frames;
      // output statistics suitable for gnuplot
      //      Stream.stdout.write(""+(now-start)/1000000+" "+frames+"\n");
    }
    avg=(last-start)/frames;

    frames=0;
    fdt=0;
    mindt=1000000;
    maxdt=0;
    start=last=Timer.getTimeStamp();
    while (last-start<1000000) {
      swap();
      now=Timer.getTimeStamp();
      dt=now-last;
      mindt=Math.min(mindt,dt);
      maxdt=Math.max(maxdt,dt);
      last=now;
      if ((dt>avg*0.75)&&(dt<avg*1.25)) {
	++frames;
	fdt+=dt;
      }
    }
    //    info("min: "+mindt+" max: "+maxdt);
    ret=1000000/(fdt/frames);
    if (typeof ret != "number") throw Error("Failed to detect refresh rate");
    return ret;
  };

  function info(x){
    Stream.stderr.write("INFO: "+x+"\n");
  }

  function warning(x){
    Stream.stderr.write("WARNING: "+x+"\n");
  }

  (function(){
    var error;

    info("GL Vendor:     "+gl.GetString(GL_VENDOR));
    info("GL Renderer:   "+gl.GetString(GL_RENDERER));
    info("GL Version:    "+gl.GetString(GL_VERSION));
    info("GL Extensions: "+gl.GetString(GL_EXTENSIONS));

    function glinfo(opts) {
      var i,s="",v;
      for (i=0;i<opts.length;++i) {
	v=gl.GetFloatv(this[opts[i]]);
	if (v.length==1) v=v[0];
	s+=(i? " " : "")+opts[i]+":"+v;
      }
      info(s);
    }	

    glinfo(["GL_RED_BITS","GL_GREEN_BITS","GL_BLUE_BITS","GL_ALPHA_BITS","GL_DEPTH_BITS","GL_STENCIL_BITS"]);

    if ( (error=gl.GetError()) != GL_NO_ERROR)
      throw new Error("OpenGL error: "+error);

    EGachine._refreshRate=refreshRate=detectRefreshRate();
    info("Detected page flip rate: "+refreshRate+"Hz");
    if (refreshRate>120)
      warning("it seems your graphics card/driver/os/hardware combination currently doesn't synchronize OpenGL buffer swaps to the screen refresh rate. You should fix this. Perhaps you have to change driver settings or update your driver.");
  })();

  //! optional main loop (used when function regsitered via EGachine.step)
  /*!
    \todo improve it (especially handle buggy driver(s/settings) not syncing to vblank)
  */
  function mainLoop() {
    // todo: improve it

    var start,last,now,dt;
    var frames=0,totalSkipped=0,skipped=0;
    var tpf=Math.round(1/refreshRate*1000000);
    
    last=start=Timer.getTimeStamp();
    
    EGachine.onExit.push(function(res){
			   info(totalSkipped+" frames lost out of "
				+(totalSkipped+frames)
				+" ("+(totalSkipped/(frames+totalSkipped)*100)+"%)");
			 });
    while (true) {
      now=Timer.getTimeStamp();
      dt=(now-last)/1000000.0;
      last=now;
      
      // output suitable for gnuplot: plot "filename"
      // Stream.stdout.write(""+(now-start)/1000000+" "+frames+"\n");
      
      ++frames;
      
      skipped=Math.round(dt/(1/refreshRate)-1);
      if (skipped>0) totalSkipped+=skipped;
      
      // get input events
      Input.poll();
      
      // clear screen
      if (EGachine.sceneGraph)
	Video.clear();
      
      EGachine._step(dt);
      
      // paint scenegraph
      if (EGachine.sceneGraph) {
	EGachine.sceneGraph.paint(now-start);
	Video.swapBuffers();
      };
    };
  };

  if ((argv.length<2)||(argv[1]=="-c")) {
    if (useSVG) {
      try{
	useSVG=true;
	ejs.ModuleLoader.load("svgl");
      }catch(e){
	useSVG=false;
      };
    };
    EGachine.connectDialog(argv[2],argv[3]);
    EGachine.exit(true);
  }else if ((argv[1]!="-h")&&(argv[1]!="--help")) {
    if (argv[1]=="-r")
      ejs.loadUntrusted(argv[2]);
    else{
      ejs.load(argv[1]);
    }
    if (EGachine._step) {
      // application without its own main loop
      // => we provide the main loop
      mainLoop();
    };
    EGachine.exit(true);
  }else{
    Stream.stderr.write("Usage: egachine [-h|--help|[[-r] FILE]|[-c host port]] [OPTION]...\n");
    EGachine.exit(true);
  };

  function addResources(){
EGachine.addResource(
({name:"egachine.svg", size:5367, z:true, data:"\
eJy9WF1vG7cSfc+v2Lt+aR/E5fCbiuUC18kNCqT3Fm3a4j4qWsraVt4VpLUd99f3DFdSJMt2G7RwgCC\
rITmcOTNnZpjzbz5dL4vbtN40XTspSciySO2sq5v2alL+9OE/o1AWm37a1tNl16ZJ2XblNxevzv/15n\
+XH/7//dtic3tVfP/Tv99/e1mUo6r6RV9W1ZsPb4off35XKClJRmmq6u1/y1flou9X46q6u7sTd1p06\
6vqww8V76l+eHs5woHR/gA0VNBMUtR9XfJ9o1FxuU7TPtXFXdMvih9h4gp/i68O9W62UjHrrqvy62I0\
wlkoelUUBRxtN5NHrMCtkm8r97vGn5ZN+9tjeynGWOXVvPsIuHx8Ug4f97uPu6buF5MyyOHnIjVXi35\
Suu3vpp6UuNs7vbt+vFlNZ0B6tU6btL5NB2bt3Ntbtvd3092sZ2kOE5NoUz8AuF0cDSiymp1ovDdcCm\
2Ol+pu1k6vYUC16K5T9WtqN1WdbtOyW1VvmtWyu56uP6amr9LVdLZo2lQtm+uP3f6n2EF5qPHjdPPFG\
suL870Ktqi+bdLdDjNWWBbVxXmd5pudkL+9sziICKXp+t16Wjep7Xfrx1KnAl/Rd6tsbX+/hIn8czTr\
lt16fJaSi1K+zqIOQWn6+zG9zr518/km9bsY5yBil1Mx2/SMTmco0PxZnXSsU8usszo2/q+56IP/Mxe\
R/F/iog/hH3fRh/g3XIxb5jEpx4t1mk/Ks9NA5y3E+U7klI+DBfeDJFpNyg57FJPZeOeNIT9sUrwpqu\
iCt9lQ1jtdHto1A/HBM9LGyGCH62b3WbkfzrFkzbq9tyRlHCTzR87NT86x18d37hx4xmuOfUaVWQGb0\
6w/CNi8a/vRpvk9jUm9njfL5fhmvfzqoYoov86Lo/XNMo1B2bara0R23f2WRrmyIbJ5w4NAZ4txI6B+\
UAWF0TZYdVQMbYzAl6SikyLqBSiodJAmjdQA/taRrUpnjwursftKvEXvfv/1vO8nCD/t+/hMyi1xDqF\
Qwu4kDORsuhqvu5u2PhT+2jXtsbSebhYDMcbKCWWPEfTBZbevPjOGA9TdrAawLs5X037xrHdnSfto1B\
d6o4XfmoJLvyu0NCJqEwqlpQDopnhfaB1BFYiMwpq2LHIxp26hFGhkSGdZgExRoWwQMsR8NHqB9PIFu\
ChctDHvU8IpviJKIZ3K+iwJpYIttML9MgzXSmElllU0wjlPkKmoRTBykNnoHO8jB267WChnhdUxsOzE\
jd+Lg2KU1u2QZS8DKsG7IF0oSHlYSB4WksOn8fgXBhrFwCiJc8ZZyBxA9ewIeY9SFmNBkbAvMlgUlPD\
BGoDvRfDEwJAFWAEYYJhCiBg/IqxGCRnyLeI+lgFeR1FBncRRz/tiwK0WWsgx9poxJW2FjHEwj5zNZ0\
+8eIgpDZXo6uK8T5/6LT2N3LMcyh4nqFav+cRo2s4W6C3XTV0v02eC8JqP6snR6eKXtMQomIq+K96+G\
4aLAnYLOq/47FP2KPl37Hl6lLu47FrUhR727Ax4mURT2gkQJYIToFvgBFJKiaBBRm01EkhyAmUig1GF\
DkaokBmtJHJOEhgYkGgqp5nOtDdIKaUzxckbgXyDfnw4rXJaGBR7Aju1w0Gf6YyfwjrjCo2bhopBXgs\
VsaqlhY6cZUqS0KgUYH0UOM6ihx4c5Bhj6Lx/QeIaWONNpGyg85IxMFYJE6LOdcwHYudMCGxsyDXQBs\
e0MlhGdVOogdAaAmUZyqHyHopR+mRk/NAomU0aOENxZqSRHDOtCtQFIa3N18oISDk+UCcpFz4ECMMDQ\
gu10igOmlGSP7NxKIL55IkTJ5i6F8QUlUYozy2BckYwBlYDv+gVwu+RfNk76zk3WaaCCEpyMlsbuXVo\
lHpgpXLVtD6IGJXJvcFaYgAt0s5KjTsCRo6QW4IlqAmQaXxIFSnLMPFFi3aCkqrQtxguVFwsQ4ZYGpV\
bjJWBizS3wCiCyyQ69eME1viCsGoCNTGSI1ECpovcVMnCQos0MijspDk/tLE8mjqkouVtuSHDE4kH1e\
B6HJo5qEkWDLbISh1s5qbnpo8jBoknTY4SlxJrtIEMDZlya1MOecnbLEQmtyeF9hS5+HB+ks1Ao92jC\
gFoJkPk+9+fevEQ06BfEFNnYARTGM0ShDJsISocp4zJ7dUgHyDz4KYmEIsYLM5F7EO/VsT7AD4oH/I+\
jyxDOeSurlwuJyh2ICo3WmQqQGURToQA5/FiEVrJmGUSRQQ3WM7inLwOEBnD2wwKL9nhKHo08EePRjm\
3VmXZQy9OQJUvCSpxFgEPAAU0ctjxdOOXFxc8jBYgDsuQRdaD9gbjJz4429BykCloIgaFABkTtjK4R4\
WJcHmLFiYpvDZwFl3HuqF2cGnm0YczVVGulha9zkjOXuZ1CMM+fryAzgaGBhr4jzFWWq7bPO663LxO/\
TiB9fGXzIP/IkJ0JIY9IrN70NDBhILsiBTg4/MvmzM7k1rq40caMsZrei5a+jRaBv1aIWeff8x8vgLd\
KRw/ZYIcOHowcxHtPUL7f3LmGlyZ5z/H01bTrm76p+etZTebLhfdpt+NW/wffRev/gCks5X1\
"}));
  };
})();
