#!@bindir@/ejs
/*
 * Copyright (C) 2004 Jens Thiele <karme@berlios.de>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!
  \brief egachine client
  \author Jens Thiele
*/

ejs.ModuleLoader.load("EGachine");
ejs.ModuleLoader.load("Video");
ejs.ModuleLoader.load("Input");
ejs.ModuleLoader.load("Audio");
ejs.ModuleLoader.load("Net");

EGachine.version={string:"@PACKAGE_VERSION@"};
(function(){
  var x=EGachine.version.string.split(".");
  EGachine.version.major=x[0];
  EGachine.version.minor=x[1];
  EGachine.version.micro=x[2];
 })();

EGachine.client=true;


EGachine.connectDialog=function(host,port){
  if (!host) host="localhost";
  if (!port) port=47000;

  // input field
  function InputField(text,maxlen)
  {
    this.maxlen=maxlen;
    this.done=false;
    this.text=text;
    // register member function as callback => bind member function
    Input.handleChar=function(obj){return function(c){obj.handleChar(c);}}(this);
    Input.charMode(true);
  };
  
  InputField.prototype.handleChar=function(c){
    //  print(c.charCodeAt(0));
    switch(c) {
      case "\u0000":
      break;
      case "\u0008":
      // delete
      this.text=this.text.substring(0,this.text.length-1);
      break;
      case "\u000D":
      // enter
      this.done=true;
      break;
      default:
      if (this.text.length<this.maxlen)
	this.text=this.text+c;
    }
  };
  
  function connect(host,port) {
    // TODO: we assume 1.333:1, restore settings
    // BUG: not all characters are displayed by current video
    // backend !!!
    // this could be a security problem!!
    // example: connect to sicher.de but really connect to
    // öööösicher.de
    
    var sx=1+1/3,sy=1;
    var i;
    var welcome="    Welcome to EGachine "+EGachine.version.string+"    ";
    var constr="Connect to";
    var s=welcome+"\n\n"+constr;
    Video.setViewportCoords({left:0,right:sx,bottom:0,top:sy});
    var maxlen=Math.max(welcome.length,constr.length);
    var inputField=new InputField(host+":"+port,maxlen);
    
    i=0.01;
    var start=Timer.getTimeStamp();
    var last=start;
    var dt;
    var blink=true;
    var blinkStamp=last;
    while (!inputField.done) {
      now=Timer.getTimeStamp();
      dt=(now-last)/1000000.0;
      last=now;
      
      if (i<sx/maxlen) i+=dt/50;
      Video.clear();
      Video.pushMatrix();
      Video.translate(sx/2,3/4*sy);
      Video.scale(i,i*1.3);
      Video.drawText(s,true);
      Video.translate(0,-3);

      Video.pushMatrix();
      Video.translate(0,0.5);
      Video.pushColor();
      Video.drawQuad(inputField.text.length+2+0.1,1+0.1);
      Video.setColor(0.3,0.3,0.3);
      Video.drawQuad(inputField.text.length+2,1);
      Video.popColor();
      Video.popMatrix();

      Video.drawText(inputField.text,true);
    
      if (now-blinkStamp>300000) {
	blinkStamp=now;
	blink=!blink;
      }

      if (blink) {
	Video.pushMatrix();
	Video.translate(inputField.text.length/2,0);
	Video.drawText("_");
	Video.popMatrix();
      }

      Video.translate(0,-1);
      Video.drawText("\n\n\npress escape to quit",true);
      Video.popMatrix();
      Video.swapBuffers();
      //    Timer.uSleep(10000);
      Input.poll();
    }
    Input.charMode(false);
    var hp=inputField.text.split(":",2);
    host=hp[0];
    port=hp[1];

    // TODO: in the moment we don't handle errors
    // we should print an error message
    stream=Net.connect(host,port);
  };

  function readMsg()
  {
    var len=Number("0x"+stream.read(6));
    var msg=stream.read(len);
    eval(msg);
  };

  try{
    connect(host,port);
    ejs.enterUntrusted();
    while (true) readMsg();
  }catch(error){
    println(error);
    println("Stack:");
    println(error.stack);
  };
};

Audio._playMusic=Audio.playMusic;
Audio.playMusic=function(resname) {
  var res=EGachine.getResource(resname);
  var dec=res.decode();
  Audio._playMusic(dec);
};

Audio.samples={};

Audio._loadSample=Audio.loadSample;
Audio._playSample=Audio.playSample;

Audio.loadSample=function(resname) {
  var res=EGachine.getResource(resname);
  var dec=res.decode();
  var sid=Audio._loadSample(dec);
  Audio.samples[resname]=sid;
  return sid;
};

Audio.playSample=function(resname,repeat) {
  var sid=Audio.samples[resname];
  if (sid==undefined)
    sid=Audio.loadSample(resname);
  if (repeat==undefined)
    repeat=0;
  return Audio._playSample(sid,repeat);
};

if ((argv.length<2)||(argv.length==3)) {
  EGachine.connectDialog(argv[1],argv[2]);
  ejs.exit(true);
};

if ((argv.length>3)||(argv[1]=="-h")||(argv[1]=="--help")) {
  stderr.write("Usage: egachine [-h|--help|FILE|[host port]] [OPTION]...\n");
  ejs.exit(true);
};

if (argv.length==2) {
  ejs.loadUntrusted(argv[1]);
  ejs.exit(true);
};
