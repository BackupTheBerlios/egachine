#!@bindir@/ejs
/*
 * Copyright (C) 2004 Jens Thiele <karme@berlios.de>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 */

/*!
  \brief egachine server
  \author Jens Thiele
*/

ejs.ModuleLoader.load("Monitorable");

function adjustConstructor(func){
  return function(){
    // required to get [[class]] right
    var ret=new Monitorable();
    // repair
    ret.__proto__=this.__proto__;
    if (!(ret instanceof Monitorable)) {
      if (!ret.__proto__.__proto__ === Object.prototype) throw new Error("bug");
      ret.__proto__.__proto__=Monitorable.prototype;
    }

    func.apply(ret,arguments);
    return ret;
  }
};

ejs.ModuleLoader.load("EGachine");
ejs.ModuleLoader.load("Net");

// todo fetch from config file
listenPort=47000;

EGachine.version=new EGachine.Version("@PACKAGE_VERSION@");
EGachine.server=true;

// todo remove those?
Video={};
Input={};

// extend network object
Net.server=new Net.Server(listenPort);
Net.server.connections={};
Net.server._movie="";
Net.server._buffer=new StringStream();
Net.server.objWriter=new ObjectWriter(Net.server._buffer);

// todo: remove this hack
dontwatch=false;

Monitorable.prototype.monitor={
  onSet:function(obj,prop,val){
    if ((!dontwatch)
	&&(prop!="monitor")
	&&(Net.server.objWriter.written(obj))) {
      //      stderr.write("set: '"+Net.server.objWriter._serialized[util.getObjectID(obj)].n+"'\n");
      Net.server.objWriter.updateProperty(obj,prop,val);
    }
    return val;
  }
};
EGachine.r=new Monitorable();

Net.server.distribute=function(obj,remoteName){
  var ret;
  //  obj.monitor=this.monitor;
  var t=this;
  if (typeof profile === typeof undefined)
    ret=t.objWriter.write(obj);
  else
    ret=profile(function(){return t.objWriter.write(obj)},stepSize/4);
  this.objWriter._remoteEval(remoteName+"="+ret);
  return ret;
};

Net.server.handleNewConnection=function(id,stream) {
  var i;
  var r;
  println("New connection: "+id);
  this.connections[id]=stream;
  handleNewConnection(id);
  stream.write(this._movie);
  stream.sync();
};

Net.server.handleDataAvailable=function(id) {
  if (!this.connections[id]) return;
  var h=this.connections[id].read(6);
  var len=Number("0x"+h);
  if ((h.length==0)||(len==0)) {
    println("Close connection: "+id);
    // todo:
    //    this.connections[id].close();
    delete this.connections[id];
    return;
  }
  Input.handleInput(jsolait.lang.jsonToObj(this.connections[id].read(len)));
};

Net.server.remoteEval=function(id,msg) {
  var h=msg.length.convertTo(16,6);
  this.connections[id].write(h);
  this.connections[id].write(msg);
  this.connections[id].sync();
};

//! broadcast changes to clients
Net.server.update=function() {
  var i;
  if (!this._buffer.str().length) return false;

  for (i in this.connections) {
    if (this.connections.hasOwnProperty(i)) {
      this.connections[i].write(this._buffer.str());
      this.connections[i].sync();
    }
  }
  this._movie+=this._buffer.str();
  this._buffer.clear();
  return true;
};

Net.server.distribute(EGachine.r,"EGachine.r");

if ((argv.length<2)||(argv[1]=="-h")||(argv[1]=="--help")){
  stderr.write("Usage: egaserver [-h|--help] FILE [OPTION]...\n");
}else{
  ejs.loadUntrusted(argv[1]);
};

