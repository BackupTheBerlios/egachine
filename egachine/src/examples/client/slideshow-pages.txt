EGachine
<http://egachine.berlios.de>

Jens Thiele
<karme@berlios.de>
--
The idea
Learning by writing
computer games.
--
Why computer games?
- Motivation, fun
- Creativity
- Physics
- Mathematics
- (English)
--
How?
Provide a tool which makes
programing games easy.
--
Requirements
- free software
- fast (graphics)
- small and simple
- portable / cross-platform
- low hardware requirements
--
Programing
- beginer friendly
- text based (any text editor)
- rapid development
- interpreter, scripting language
--
EGachine features
- free software
- JavaScript
- simple API
- modular
- Audio, Video, SVG, Networking, ...
- (run untrusted code)
--
EJS
- extensible JavaScript shell
- core for EGachine
- using mozilla's JavaScript
  interpreter SpiderMonkey
- small and simple
- modules (native and or JavaScript)
--
Video modules
- OpenGL language bindings
- Video layer 
  (basic 2D functionality)
- a simple scene-graph
- SVG
--
(Open)GL module
- OpenGL: cross-platform API for
  hardware accelerated graphics
- bindings close to the C API
- for the advanced users
- not yet complete
- (graphics hardware is cheap now)
--
@client/opengl/glxgears.js
--
Video (layer) module
- graphics initialisation
- providing basic 2D functionality
  (using gl module)
- rotate / translate
- drawing primitives
- texture/image loading
--
Simple scene-graph
- based upon video module
  (no direct OpenGL dependency)
- for beginners
- good enough to move some sprites
EGachine.sceneGraph
=new sg.Rectangle(size,pos);
--
@client/simple.js
--
@client/pong.js
--
@client/balls.js
--
SVG
- SVG: scaleable vector graphics
- SVG 1.1 W3C recommendation
- huge:
  "SVG is a 600+ pages specification
  which uses other specifications (CSS,
  DOM, SMIL) of comparable sizes."
- animation: 
  declarative and/or scripting
--
SVG module
- using SVGL
- providing SVG scripting
- ECMAScript bindings for a very
  small subset of DOM level 1
  and DOM level 2 (mouse) events
- experimental, buggy, unsafe
--
@svg/svgtetris.svg
--
@svg/domevent.svg
--
@svg/lion.svg
--
Audio module
- very basic functionality
- play music
- play samples
--
@client/audio.js
--
Input module
For beginners:
- gamepad like input devices
  (perhaps emulated by keyboard)
- or text input
For advanced users:
- events for
  keyboard, mouse, joystick,
  window manager, ...
--
Network Module
- basic stream interface
  (read/write)
- distributed object graph
--
Artwork:
Free choice:
- images/textures:
  GIMP, ...
- music:
  mod trackers (for small sizes)
  soundtracker, cheesetracker, ...
- SVG:
  inkscape, sodipodi, ...
--
The End - Thanks

Questions ?
<http://egachine.berlios.de>
<karme@berlios.de>
