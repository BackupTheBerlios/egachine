<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20010904//EN"
"http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">

<!--
SVG Tetris for SVG-enabled Mozilla
(c)2004 alex fritze <alex@croczilla.com> 

For infos about Mozilla/SVG see          
http://www.mozilla.org/projects/svg

Slightly modified by Jens Thiele <karme@berlios.de>
to run with egachine/ejs/svgl <http://egachine.berlios.de>
please don't blame the original author for the bugs I introduced
The changes
* svgl does not support fill as attribute only as style?
* specify size                          
* different input mechanism
-->

<svg 
  xmlns="http://www.w3.org/2000/svg"
  version="1.0"
  x="0"
  y="0"
  width="30"
  height="30"
  >
  <script><![CDATA[
//----------------------------------------------------------------------
// static data

var SVG_NS ="http://www.w3.org/2000/svg";

var ROWS = 20;
var COLS = 10;

var HPAD = 2; // horizontal padding used in laying out grids
var VPAD = 2; // ditto for vertical

var SHAPE_DESCRIPTORS = [
  { color: "grey",   orientations: [ [[0,0],[1,0],[0,1],[1,1]] ] },
  { color: "blue",   orientations: [ [[0,0],[1,0],[2,0],[2,1]],
                                     [[1,0],[1,1],[1,2],[0,2]],
                                     [[0,0],[0,1],[1,1],[2,1]],
                                     [[0,0],[1,0],[0,1],[0,2]] ] },
  { color: "purple", orientations: [ [[0,0],[0,1],[1,0],[2,0]],
                                     [[0,0],[1,0],[1,1],[1,2]],
                                     [[0,1],[1,1],[2,1],[2,0]],
                                     [[0,0],[0,1],[0,2],[1,2]] ] },
  { color: "cyan",   orientations: [ [[0,0],[1,0],[2,0],[3,0]],
                                     [[0,0],[0,1],[0,2],[0,3]] ] },
  { color: "green",  orientations: [ [[1,0],[2,0],[0,1],[1,1]],
                                     [[0,0],[0,1],[1,1],[1,2]] ] },
  { color: "red",    orientations: [ [[1,0],[1,1],[0,1],[0,2]],
                                     [[0,0],[1,0],[1,1],[2,1]] ] },
  { color: "yellow", orientations: [ [[0,1],[1,1],[2,1],[1,0]],
                                     [[0,0],[0,1],[0,2],[1,1]],
                                     [[0,0],[1,0],[2,0],[1,1]],
                                     [[1,0],[1,1],[1,2],[0,1]] ] }
];

//----------------------------------------------------------------------
// Helper functions

// map a function over an array; accumulate output in new array:
function mapcar(f, a) {
  var res = new Array(a.length);
  for (var i=0;i<a.length;++i) {
    res[i] = f(a[i]);
  }
  return res;
}

// map a function over an array; don't accumulate output:
function mapc(f, a) {
  for (var i=0;i<a.length;++i) {
    f(a[i]);
  }
}

// return true if predicate p is true for every element of the array:
function every(p, a) {
  for (var i=0;i<a.length;++i) {
    if (!p(a[i])) return false;
  }
  return true;
}

function suspendRedraw()
{
  // asv doesn't implement suspendRedraw, so we wrap this in a try-block:
  try {
    document.documentElement.suspendRedraw(0);
  }
  catch(e) {}
}

function unsuspendRedraw()
{
  // asv doesn't implement unsuspendRedraw, so we wrap this in a try-block:
  try {
    document.documentElement.unsuspendRedraw(0);
  }
  catch(e) {}
}

//----------------------------------------------------------------------
// Shape class

function Shape(position) {
  // create a new shape, randomly picking a descriptor & orientation:
  this._descriptor = SHAPE_DESCRIPTORS[Math.round(Math.random()*(SHAPE_DESCRIPTORS.length-1))];
  this._orientation = Math.round(Math.random()*(this._descriptor.orientations.length-1));
  this._pos = position;
}

Shape.prototype = {
  getCellArray : function() {
    var s = this;
    return mapcar(function(coord) { return [coord[0]+s._pos[0],coord[1]+s._pos[1]]; },
               this._descriptor.orientations[this._orientation]);
  },
  getColor : function() {
    return this._descriptor.color;
  },
  move : function(dx,dy) {
    this._pos[0] += dx; this._pos[1] += dy;
  },
  rotate : function(dOrient) {
    this._orientation = (this._orientation+dOrient) % this._descriptor.orientations.length;
    if (this._orientation<0) this._orientation += this._descriptor.orientations.length;
  }
};

//----------------------------------------------------------------------
// Grid class
cellStyle="stroke:grey;stroke-width:0.05;fill:";

function Grid(cols, rows, color, bordercolor, x, y, width, height, node) {
  // Create a cols*rows grid with a 1/2-cell border.
  // Scale to fit width*height user pixels (including border).
  // Place at x,y user pixel coords.

  this._cols = cols;
  this._rows = rows;
  this._color = color;
  this._cells = [];

  node.setAttribute("transform", "translate("+x+","+y+") scale("+
                                 (width/(cols+1))+","+(height/(rows+1))+") translate(0.5,0.5)");

  this._background = document.createElementNS(SVG_NS, "rect");
  this._background.setAttribute("style", "fill:"+color+";stroke-width:1;stroke-linejoin:round;stroke:"+bordercolor);
  this._background.setAttribute("x", "-0.5");
  this._background.setAttribute("y", "-0.5");
  this._background.setAttribute("width", cols+1);
  this._background.setAttribute("height", rows+1);

  this._rowArray = document.createElementNS(SVG_NS, "g");
  for (var r=0;r<rows;++r) {
    var row_group = document.createElementNS(SVG_NS, "g");
    row_group.setAttribute("transform", "translate(0,"+r+")");
    this._cells[r]=[];
    for (var c=0;c<cols;++c) {
      var cell = document.createElementNS(SVG_NS, "rect");
      cell.setAttribute("x", c);
      cell.setAttribute("width", "1");
      cell.setAttribute("height", "1");
      cell.setAttribute("style", cellStyle+"none");
      cell.setAttribute("occupied", "false");
      if (cell.getAttribute("occupied") != "false") throw cell.getAttribute("occupied");
      row_group.appendChild(cell);
      this._cells[r][c]=cell;
    }
    this._rowArray.appendChild(row_group);
  }
  
  node.appendChild(this._background);
  node.appendChild(this._rowArray);
}

Grid.prototype = {
  getCell: function(coord) {
    return this._cells[coord[1]][coord[0]];
  },
  colorCell : function(coord, color) {
    try{
       this.getCell(coord).setAttribute("style", cellStyle+color);
    }catch(e){
       stderr.write("Warning: "+e+" coord:"+coord);
    }
  },
  clearCell : function(coord) {
    this.colorCell(coord, this._color);
  },
  occupyCell : function(coord) {
    this.getCell(coord).setAttribute("occupied", "true");
    if (this.cellInBounds(coord) && (!this.cellOccupied(coord))) throw this.getCell(coord).getAttribute("occupied");
  },
  unoccupyCell : function(coord) {
    this.getCell(coord).setAttribute("occupied", "false");
  },
  cellInBounds : function(coord) {
    return (coord[0]>=0 && coord[1]>=0 && coord[0]<this._cols && coord[1]<this._rows);
  },
  cellOccupied : function(coord) {
    return this.getCell(coord).getAttribute("occupied")=="true";
  },
  eliminateFullRows : function() {
    var g = this;
    function rowFull(r) {
      for (var c=0;c<g._cols;++c) {
        if (!g.cellOccupied([c,r])) return false;
      }
      return true;
    }

    function moveCellDown(c,r) {
      var src = g.getCell([c,r]);
      var dest = g.getCell([c,r+1]);
      if (dest) {
	dest.setAttribute("style", src.getAttribute("style"));
	dest.setAttribute("occupied", src.getAttribute("occupied"));
      }
      src.setAttribute("occupied", "false");
      src.setAttribute("style", cellStyle+g._color);
    }
    
    function eliminateRow(row) {
      suspendRedraw();
      for (var c=0;c<g._cols;++c) {
        g.clearCell([c,row]);
        g.unoccupyCell([c,row]);
      }
      for (var r=row-1;r>=0;--r) {
        for (c=0;c<g._cols;++c) {
          if (g.cellOccupied([c,r])) 
            moveCellDown(c,r);
        }
      }
      unsuspendRedraw();
    }

    for (var r=0;r<this._rows;++r) {
      if (rowFull(r)) 
        eliminateRow(r);
    }
  }
};

//----------------------------------------------------------------------
// message class

function Message(txt, position, style) {
  this._node = document.createElementNS(SVG_NS, "text");
  this._node.setAttribute("style", style);
  this._node.setAttribute("x", position[0]);
  this._node.setAttribute("y", position[1]);
  this._node.appendChild(document.createTextNode(txt));
}

Message.prototype = {
  show : function() {
    suspendRedraw();
    document.documentElement.appendChild(this._node);
    unsuspendRedraw();
  },
  hide : function() {
    document.documentElement.removeChild(this._node);
  }
};

//----------------------------------------------------------------------
// grid <---> shape operations

function canPlace(shape, grid) {
  // can only place if all cells in shape are in bounds and not occupied:
  return every(function(coord){ return grid.cellInBounds(coord) &&
                                       !grid.cellOccupied(coord); },
                shape.getCellArray());
}

function show(shape, grid) {
  suspendRedraw();
  mapc(function(coord){ grid.colorCell(coord, shape.getColor()); },
       shape.getCellArray());
  unsuspendRedraw();
}

function hide(shape, grid) {
  suspendRedraw();
  mapc(function(coord){ grid.clearCell(coord); },
       shape.getCellArray());
  unsuspendRedraw();
}

function occupy(shape, grid) {
  mapc(function(coord){ grid.occupyCell(coord); },
       shape.getCellArray());
}

function move(shape, grid, dx, dy) {
  shape.move(dx,dy);
  if (!canPlace(shape, grid)) {
    shape.move(-dx,-dy);
    return false;
  }
  suspendRedraw();
  shape.move(-dx, -dy);
  hide(shape, grid);
  shape.move(dx,dy);
  show(shape, grid);
  unsuspendRedraw();
  return true;
}

function rotate(shape, grid, dOrient) {
  shape.rotate(dOrient);
  if (!canPlace(shape, grid)) {
    shape.rotate(-dOrient);
    return false;
  }
  suspendRedraw();
  shape.rotate(-dOrient);
  hide(shape, grid);
  shape.rotate(dOrient);
  show(shape, grid);
  unsuspendRedraw();
  return true;
}

function drop(shape, grid) {
  suspendRedraw();
  while (move(shape, grid, 0, 1))
    /**/;
  unsuspendRedraw();
}

//----------------------------------------------------------------------
// the game:

var board;   // grid where the action is
var preview; // grid where the next shape will be previewed
var currentShape; 
var nextShape; 
var gameState; // "stopped", "running"

function startNewGame() {
  // XXX clear grids

  suspendRedraw();
  currentShape = new Shape([3,0]);
  show(currentShape, board);
  nextShape = new Shape([0,0]);
  show(nextShape, preview);
  unsuspendRedraw();
  gameState = "running";
  tick();
}

function runNextShape() {
  occupy(currentShape, board);
  board.eliminateFullRows();

  suspendRedraw();
  currentShape = nextShape;
  hide(nextShape, preview);
  currentShape.move(3,0);
  if (!canPlace(currentShape, board)) {
    unsuspendRedraw();
    return false; // game over!
  }
  show(currentShape, board);
  nextShape = new Shape([0,0]);
  show(nextShape, preview);
  unsuspendRedraw();
  return true;
}

function tick() {
  if (gameState != "running") return;

  if (!move(currentShape, board, 0, 1)) {
    if(!runNextShape()) {
      var m = new Message("Game Over!", [2,10], "stroke:none;font-size:3px;fill:#ff8800;");
      m.show();
      return; // Game over
    }
  }
  setTimeout("tick()", 300);
}

function pause() {
  gameState = "stopped";
}

function resume() {
  if (gameState == "stopped") {
    gameState = "running";
    tick();
  }
}

//----------------------------------------------------------------------
// user input handler

Input.handleChar=function(c){
  switch (c) {
    case " ": /* space */
      if (gameState == "running")
        drop(currentShape, board);
      break;
    case "H":
    case "h":
      pause();
      alert("Keys:\n"+
            "-------------------------------------\n\n"+
            "h : Display this help\n"+
            "n : Start new game\n"+
            "p : Toggle pause game\n"+
            "up    : Rotate piece counterclockwise\n"+
            "down  : Rotate piece clocwise\n"+
            "left  : Move piece left\n"+
            "right : Move piece right\n"+
            "space : Drop piece\n");
      resume();
      break;
    case "p":
      if (gameState == "running") 
        pause();
      else
        resume();
      break;
    case "w": /* up */
      if (gameState == "running")
        rotate(currentShape, board, -1);
      break;
    case "s": /* down */
      if (gameState == "running")
        rotate(currentShape, board, 1);
      break;
    case "a": /* left */
      if (gameState == "running")
        move(currentShape, board, -1, 0);
      break;
    case "d": /* right */
      if (gameState == "running")
        move(currentShape, board, 1, 0);
      break;
    default:
      stderr.write("unhandled char: '"+c+"'\n");
  }
}

//----------------------------------------------------------------------

function init() {
  // page layout:
//  document.documentElement.setAttribute("viewBox", "0 0 "+(3*HPAD+(COLS+1)+5)+" "+(2*VPAD+(ROWS+1)));

  board = new Grid(COLS, ROWS, "black", "#0000ff", HPAD, VPAD, COLS+1, ROWS+1, document.getElementById("board"));
  preview = new Grid(4,4, "black", "#ff0000", 2*HPAD+COLS+1, VPAD, 5, 5, document.getElementById("preview"));

  startNewGame();

  // initialize event processing:
  //  document.documentElement.addEventListener("keydown", keyHandler, false);
  Input.charMode(true);
}

init();
]]>
</script>
  <text x="1" y="1" style="font-size:1;fill:black">SVG Tetris - Press 'h' for help.</text>
  <g id="preview" style="stroke-width:0.02" />
  <g id="board" style="stroke-width:0.02" />
</svg>
