gl module:

OpenGL/Mesa and  GLU wrapper  module.  It tries to be   close to the C
API. This module  wraps only OpenGL  and GLU functions OpenGL setup is
done in the video module. Please see TODO for the missing functions.

Differences from the C API:
- all functions are in the gl (module) object:
  Example:
  instead of glBegin write gl.Begin

- function results/output are always return values
  Example:

  C API:
  void glGetIntegerv( GLenum pname, GLint *params )

  JavaScript:
  array=gl.GetIntegerv( pname )

Most of the  code is autogenerated. At  the moment (slightly modified)
Mesa header  files  are  parsed to extract    the API information  but
probably this will change.

I did some research on how other projects do this:

1) Mesa has a:
XML OpenGL API specification
(<http://oss.software.ibm.com/linux/patches/?patch_id=1563>).
Python is used to process the XML file.

2) jogl has gluegen which parses source  code => could  not be as good
as  the XML   file since the   C  source has less    information (c is
ambiguous / pointers vs. arrays ...)

3)  "OpenGL.NET  is   an  OpenGL-Wrapper implemented  in   C#  for the
.NET-Framework. This binding should  not be created by  hand but  by a
WrapperGenerator, which is  part of  this  project."  uses  doxygen to
parse    source  code    (same  does   Qt#)   =>  same     as   for 2)
<http://www.csdragons.de/?id=15&lang=en>

Summary:

1) is clearly  the way   to go (perhaps    the  XML file  needs   some
modification) especially difficult is glGet (where I used the man page
to extract  the needed information)  some stuff might be  difficult to
express in XML/require a programing language.
