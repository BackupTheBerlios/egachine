gl module:
OpenGL wrapper module. Tries to be close to the C API.

Differences from the C API:
- all functions are in the gl object:
  Example:
  instead of glBegin write gl.Begin

- function results are always return values
  Example:

  C API:
  void glGetIntegerv( GLenum pname, GLint *params )

  JavaScript:
  array=gl.GetIntegerv( pname )

Javascript OpenGL language binding
(quite a hack - needs a major cleanup)

NOTE:
there is no code to setup opengl
only the opengl functions are wrapped
opengl setup must be done seperately
(egachine opengl setup is done in video implementation
currently there is only one: sdlopengl
=> sdl is used to setup opengl)

NOTE:
perhaps not all egachine implementations will use/support opengl
first i did not want to wrap opengl because egachine should have a simple
API and should be simple to implement
on the other hand opengl is available on many platforms and has a nice API
(and now there is a stripped down version of opengl for the embedded space)

=> users can stick with the egachine API and it should be easy to implement
the video API on new platforms

or users can simply use the opengl stuff with its own benefits...

most of the code is autogenerated!
at the moment i parse (slightly modified) mesa header files to extract 
the gl api information but probably this will change.

I did some research on how other projects do this:

1) Mesa has a:
XML OpenGL API specification
<http://oss.software.ibm.com/linux/patches/?patch_id=1563>
python is used to process the xml file

2) jogl has gluegen which parses source code
=> could not be as good as the xml file since the c source has less information
(c is ambiguous / pointers vs. arrays ...)

3) "OpenGL.NET is an OpenGL-Wrapper implemented in C# for the
.NET-Framework. This binding should not be created by hand but by a
WrapperGenerator, which is part of this project."
uses doxygen to parse source code (same does Qt#)
=> same as for 2)
<http://www.csdragons.de/?id=15&lang=en>


1) is clearly the way to go (perhaps the xml file needs some modification)
especially difficult is glGet (where I used the man page to extract the needed
information)
some stuff might be difficult to express in xml/require a programing language
--------------------------------------------------------------------------------
