/* DO NOT EDIT THIS FILE - it is generated by jsgl_gen */
static JSBool
ejs_glClearIndex (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat c;
  if (!to_GLfloat (cx, obj, argv[0], c))
    return JS_FALSE;
  glClearIndex (c);
  return JS_TRUE;
}

static JSBool
ejs_glClearColor (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLclampf red;
  if (!to_GLclampf (cx, obj, argv[0], red))
    return JS_FALSE;
  GLclampf green;
  if (!to_GLclampf (cx, obj, argv[1], green))
    return JS_FALSE;
  GLclampf blue;
  if (!to_GLclampf (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLclampf alpha;
  if (!to_GLclampf (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glClearColor (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glClear (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbitfield mask;
  if (!to_GLbitfield (cx, obj, argv[0], mask))
    return JS_FALSE;
  glClear (mask);
  return JS_TRUE;
}

static JSBool
ejs_glIndexMask (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint mask;
  if (!to_GLuint (cx, obj, argv[0], mask))
    return JS_FALSE;
  glIndexMask (mask);
  return JS_TRUE;
}

static JSBool
ejs_glColorMask (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLboolean red;
  if (!to_GLboolean (cx, obj, argv[0], red))
    return JS_FALSE;
  GLboolean green;
  if (!to_GLboolean (cx, obj, argv[1], green))
    return JS_FALSE;
  GLboolean blue;
  if (!to_GLboolean (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLboolean alpha;
  if (!to_GLboolean (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColorMask (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glAlphaFunc (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum func;
  if (!to_GLenum (cx, obj, argv[0], func))
    return JS_FALSE;
  GLclampf ref;
  if (!to_GLclampf (cx, obj, argv[1], ref))
    return JS_FALSE;
  glAlphaFunc (func, ref);
  return JS_TRUE;
}

static JSBool
ejs_glBlendFunc (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum sfactor;
  if (!to_GLenum (cx, obj, argv[0], sfactor))
    return JS_FALSE;
  GLenum dfactor;
  if (!to_GLenum (cx, obj, argv[1], dfactor))
    return JS_FALSE;
  glBlendFunc (sfactor, dfactor);
  return JS_TRUE;
}

static JSBool
ejs_glLogicOp (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum opcode;
  if (!to_GLenum (cx, obj, argv[0], opcode))
    return JS_FALSE;
  glLogicOp (opcode);
  return JS_TRUE;
}

static JSBool
ejs_glCullFace (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glCullFace (mode);
  return JS_TRUE;
}

static JSBool
ejs_glFrontFace (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glFrontFace (mode);
  return JS_TRUE;
}

static JSBool
ejs_glPointSize (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat size;
  if (!to_GLfloat (cx, obj, argv[0], size))
    return JS_FALSE;
  glPointSize (size);
  return JS_TRUE;
}

static JSBool
ejs_glLineWidth (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat width;
  if (!to_GLfloat (cx, obj, argv[0], width))
    return JS_FALSE;
  glLineWidth (width);
  return JS_TRUE;
}

static JSBool
ejs_glLineStipple (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLint factor;
  if (!to_GLint (cx, obj, argv[0], factor))
    return JS_FALSE;
  GLushort pattern;
  if (!to_GLushort (cx, obj, argv[1], pattern))
    return JS_FALSE;
  glLineStipple (factor, pattern);
  return JS_TRUE;
}

static JSBool
ejs_glPolygonMode (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum face;
  if (!to_GLenum (cx, obj, argv[0], face))
    return JS_FALSE;
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[1], mode))
    return JS_FALSE;
  glPolygonMode (face, mode);
  return JS_TRUE;
}

static JSBool
ejs_glPolygonOffset (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat factor;
  if (!to_GLfloat (cx, obj, argv[0], factor))
    return JS_FALSE;
  GLfloat units;
  if (!to_GLfloat (cx, obj, argv[1], units))
    return JS_FALSE;
  glPolygonOffset (factor, units);
  return JS_TRUE;
}

/* TODO: glPolygonStipple */

/* TODO: glGetPolygonStipple */

static JSBool
ejs_glEdgeFlag (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLboolean flag;
  if (!to_GLboolean (cx, obj, argv[0], flag))
    return JS_FALSE;
  glEdgeFlag (flag);
  return JS_TRUE;
}

/* TODO: glEdgeFlagv */

static JSBool
ejs_glScissor (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[2], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[3], height))
    return JS_FALSE;
  glScissor (x, y, width, height);
  return JS_TRUE;
}

/* TODO: glClipPlane */

/* TODO: glGetClipPlane */

static JSBool
ejs_glDrawBuffer (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glDrawBuffer (mode);
  return JS_TRUE;
}

static JSBool
ejs_glReadBuffer (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glReadBuffer (mode);
  return JS_TRUE;
}

static JSBool
ejs_glEnable (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum cap;
  if (!to_GLenum (cx, obj, argv[0], cap))
    return JS_FALSE;
  glEnable (cap);
  return JS_TRUE;
}

static JSBool
ejs_glDisable (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum cap;
  if (!to_GLenum (cx, obj, argv[0], cap))
    return JS_FALSE;
  glDisable (cap);
  return JS_TRUE;
}

static JSBool
ejs_glIsEnabled (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum cap;
  if (!to_GLenum (cx, obj, argv[0], cap))
    return JS_FALSE;
  GLboolean nres = glIsEnabled (cap);
  if (!from_GLboolean (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glEnableClientState (JSContext * cx, JSObject * obj, uintN argc,
			 jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum cap;
  if (!to_GLenum (cx, obj, argv[0], cap))
    return JS_FALSE;
  glEnableClientState (cap);
  return JS_TRUE;
}

static JSBool
ejs_glDisableClientState (JSContext * cx, JSObject * obj, uintN argc,
			  jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum cap;
  if (!to_GLenum (cx, obj, argv[0], cap))
    return JS_FALSE;
  glDisableClientState (cap);
  return JS_TRUE;
}

/* TODO: glGetBooleanv */

/* TODO: glGetDoublev */

/* TODO: glGetFloatv */

/* TODO: glGetIntegerv */

static JSBool
ejs_glPushAttrib (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbitfield mask;
  if (!to_GLbitfield (cx, obj, argv[0], mask))
    return JS_FALSE;
  glPushAttrib (mask);
  return JS_TRUE;
}

static JSBool
ejs_glPopAttrib (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glPopAttrib ();
  return JS_TRUE;
}

static JSBool
ejs_glPushClientAttrib (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbitfield mask;
  if (!to_GLbitfield (cx, obj, argv[0], mask))
    return JS_FALSE;
  glPushClientAttrib (mask);
  return JS_TRUE;
}

static JSBool
ejs_glPopClientAttrib (JSContext * cx, JSObject * obj, uintN argc, jsval *,
		       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glPopClientAttrib ();
  return JS_TRUE;
}

static JSBool
ejs_glRenderMode (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  GLint nres = glRenderMode (mode);
  if (!from_GLint (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glGetError (JSContext * cx, JSObject * obj, uintN argc, jsval *,
		jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  GLenum nres = glGetError ();
  if (!from_GLenum (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glGetString (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum name;
  if (!to_GLenum (cx, obj, argv[0], name))
    return JS_FALSE;
  const GLubyte *nres = glGetString (name);
  if (!from_const_GLubyte_ptr (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glFinish (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glFinish ();
  return JS_TRUE;
}

static JSBool
ejs_glFlush (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glFlush ();
  return JS_TRUE;
}

static JSBool
ejs_glHint (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[1], mode))
    return JS_FALSE;
  glHint (target, mode);
  return JS_TRUE;
}

static JSBool
ejs_glClearDepth (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLclampd depth;
  if (!to_GLclampd (cx, obj, argv[0], depth))
    return JS_FALSE;
  glClearDepth (depth);
  return JS_TRUE;
}

static JSBool
ejs_glDepthFunc (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum func;
  if (!to_GLenum (cx, obj, argv[0], func))
    return JS_FALSE;
  glDepthFunc (func);
  return JS_TRUE;
}

static JSBool
ejs_glDepthMask (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLboolean flag;
  if (!to_GLboolean (cx, obj, argv[0], flag))
    return JS_FALSE;
  glDepthMask (flag);
  return JS_TRUE;
}

static JSBool
ejs_glDepthRange (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLclampd near_val;
  if (!to_GLclampd (cx, obj, argv[0], near_val))
    return JS_FALSE;
  GLclampd far_val;
  if (!to_GLclampd (cx, obj, argv[1], far_val))
    return JS_FALSE;
  glDepthRange (near_val, far_val);
  return JS_TRUE;
}

static JSBool
ejs_glClearAccum (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat red;
  if (!to_GLfloat (cx, obj, argv[0], red))
    return JS_FALSE;
  GLfloat green;
  if (!to_GLfloat (cx, obj, argv[1], green))
    return JS_FALSE;
  GLfloat blue;
  if (!to_GLfloat (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLfloat alpha;
  if (!to_GLfloat (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glClearAccum (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glAccum (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum op;
  if (!to_GLenum (cx, obj, argv[0], op))
    return JS_FALSE;
  GLfloat value;
  if (!to_GLfloat (cx, obj, argv[1], value))
    return JS_FALSE;
  glAccum (op, value);
  return JS_TRUE;
}

static JSBool
ejs_glMatrixMode (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glMatrixMode (mode);
  return JS_TRUE;
}

static JSBool
ejs_glOrtho (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLdouble left;
  if (!to_GLdouble (cx, obj, argv[0], left))
    return JS_FALSE;
  GLdouble right;
  if (!to_GLdouble (cx, obj, argv[1], right))
    return JS_FALSE;
  GLdouble bottom;
  if (!to_GLdouble (cx, obj, argv[2], bottom))
    return JS_FALSE;
  GLdouble top;
  if (!to_GLdouble (cx, obj, argv[3], top))
    return JS_FALSE;
  GLdouble near_val;
  if (!to_GLdouble (cx, obj, argv[4], near_val))
    return JS_FALSE;
  GLdouble far_val;
  if (!to_GLdouble (cx, obj, argv[5], far_val))
    return JS_FALSE;
  glOrtho (left, right, bottom, top, near_val, far_val);
  return JS_TRUE;
}

static JSBool
ejs_glFrustum (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLdouble left;
  if (!to_GLdouble (cx, obj, argv[0], left))
    return JS_FALSE;
  GLdouble right;
  if (!to_GLdouble (cx, obj, argv[1], right))
    return JS_FALSE;
  GLdouble bottom;
  if (!to_GLdouble (cx, obj, argv[2], bottom))
    return JS_FALSE;
  GLdouble top;
  if (!to_GLdouble (cx, obj, argv[3], top))
    return JS_FALSE;
  GLdouble near_val;
  if (!to_GLdouble (cx, obj, argv[4], near_val))
    return JS_FALSE;
  GLdouble far_val;
  if (!to_GLdouble (cx, obj, argv[5], far_val))
    return JS_FALSE;
  glFrustum (left, right, bottom, top, near_val, far_val);
  return JS_TRUE;
}

static JSBool
ejs_glViewport (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[2], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[3], height))
    return JS_FALSE;
  glViewport (x, y, width, height);
  return JS_TRUE;
}

static JSBool
ejs_glPushMatrix (JSContext * cx, JSObject * obj, uintN argc, jsval *,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glPushMatrix ();
  return JS_TRUE;
}

static JSBool
ejs_glPopMatrix (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glPopMatrix ();
  return JS_TRUE;
}

static JSBool
ejs_glLoadIdentity (JSContext * cx, JSObject * obj, uintN argc, jsval *,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glLoadIdentity ();
  return JS_TRUE;
}

static JSBool
ejs_glLoadMatrixd (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble m[16];
  if (!to_GLdouble_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glLoadMatrixd (m);
  return JS_TRUE;
}

static JSBool
ejs_glLoadMatrixf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat m[16];
  if (!to_GLfloat_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glLoadMatrixf (m);
  return JS_TRUE;
}

static JSBool
ejs_glMultMatrixd (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble m[16];
  if (!to_GLdouble_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glMultMatrixd (m);
  return JS_TRUE;
}

static JSBool
ejs_glMultMatrixf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat m[16];
  if (!to_GLfloat_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glMultMatrixf (m);
  return JS_TRUE;
}

static JSBool
ejs_glRotated (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble angle;
  if (!to_GLdouble (cx, obj, argv[0], angle))
    return JS_FALSE;
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[1], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[2], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[3], z))
    return JS_FALSE;
  glRotated (angle, x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glRotatef (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat angle;
  if (!to_GLfloat (cx, obj, argv[0], angle))
    return JS_FALSE;
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[1], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[2], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[3], z))
    return JS_FALSE;
  glRotatef (angle, x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glScaled (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  glScaled (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glScalef (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  glScalef (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glTranslated (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  glTranslated (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glTranslatef (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  glTranslatef (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glIsList (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint list;
  if (!to_GLuint (cx, obj, argv[0], list))
    return JS_FALSE;
  GLboolean nres = glIsList (list);
  if (!from_GLboolean (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glDeleteLists (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLuint list;
  if (!to_GLuint (cx, obj, argv[0], list))
    return JS_FALSE;
  GLsizei range;
  if (!to_GLsizei (cx, obj, argv[1], range))
    return JS_FALSE;
  glDeleteLists (list, range);
  return JS_TRUE;
}

static JSBool
ejs_glGenLists (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLsizei range;
  if (!to_GLsizei (cx, obj, argv[0], range))
    return JS_FALSE;
  GLuint nres = glGenLists (range);
  if (!from_GLuint (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

static JSBool
ejs_glNewList (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLuint list;
  if (!to_GLuint (cx, obj, argv[0], list))
    return JS_FALSE;
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[1], mode))
    return JS_FALSE;
  glNewList (list, mode);
  return JS_TRUE;
}

static JSBool
ejs_glEndList (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glEndList ();
  return JS_TRUE;
}

static JSBool
ejs_glCallList (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint list;
  if (!to_GLuint (cx, obj, argv[0], list))
    return JS_FALSE;
  glCallList (list);
  return JS_TRUE;
}

/* TODO: glCallLists */

static JSBool
ejs_glListBase (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint base;
  if (!to_GLuint (cx, obj, argv[0], base))
    return JS_FALSE;
  glListBase (base);
  return JS_TRUE;
}

static JSBool
ejs_glBegin (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glBegin (mode);
  return JS_TRUE;
}

static JSBool
ejs_glEnd (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glEnd ();
  return JS_TRUE;
}

static JSBool
ejs_glVertex2d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  glVertex2d (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  glVertex2f (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  glVertex2i (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  glVertex2s (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  glVertex3d (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  glVertex3f (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLint z;
  if (!to_GLint (cx, obj, argv[2], z))
    return JS_FALSE;
  glVertex3i (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  GLshort z;
  if (!to_GLshort (cx, obj, argv[2], z))
    return JS_FALSE;
  glVertex3s (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  GLdouble w;
  if (!to_GLdouble (cx, obj, argv[3], w))
    return JS_FALSE;
  glVertex4d (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  GLfloat w;
  if (!to_GLfloat (cx, obj, argv[3], w))
    return JS_FALSE;
  glVertex4f (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLint z;
  if (!to_GLint (cx, obj, argv[2], z))
    return JS_FALSE;
  GLint w;
  if (!to_GLint (cx, obj, argv[3], w))
    return JS_FALSE;
  glVertex4i (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  GLshort z;
  if (!to_GLshort (cx, obj, argv[2], z))
    return JS_FALSE;
  GLshort w;
  if (!to_GLshort (cx, obj, argv[3], w))
    return JS_FALSE;
  glVertex4s (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[2];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glVertex2dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[2];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glVertex2fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[2];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glVertex2iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex2sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[2];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glVertex2sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glVertex3dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glVertex3fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glVertex3iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex3sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glVertex3sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[4];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glVertex4dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[4];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glVertex4fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[4];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glVertex4iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glVertex4sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[4];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glVertex4sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3b (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLbyte nx;
  if (!to_GLbyte (cx, obj, argv[0], nx))
    return JS_FALSE;
  GLbyte ny;
  if (!to_GLbyte (cx, obj, argv[1], ny))
    return JS_FALSE;
  GLbyte nz;
  if (!to_GLbyte (cx, obj, argv[2], nz))
    return JS_FALSE;
  glNormal3b (nx, ny, nz);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble nx;
  if (!to_GLdouble (cx, obj, argv[0], nx))
    return JS_FALSE;
  GLdouble ny;
  if (!to_GLdouble (cx, obj, argv[1], ny))
    return JS_FALSE;
  GLdouble nz;
  if (!to_GLdouble (cx, obj, argv[2], nz))
    return JS_FALSE;
  glNormal3d (nx, ny, nz);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat nx;
  if (!to_GLfloat (cx, obj, argv[0], nx))
    return JS_FALSE;
  GLfloat ny;
  if (!to_GLfloat (cx, obj, argv[1], ny))
    return JS_FALSE;
  GLfloat nz;
  if (!to_GLfloat (cx, obj, argv[2], nz))
    return JS_FALSE;
  glNormal3f (nx, ny, nz);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint nx;
  if (!to_GLint (cx, obj, argv[0], nx))
    return JS_FALSE;
  GLint ny;
  if (!to_GLint (cx, obj, argv[1], ny))
    return JS_FALSE;
  GLint nz;
  if (!to_GLint (cx, obj, argv[2], nz))
    return JS_FALSE;
  glNormal3i (nx, ny, nz);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLshort nx;
  if (!to_GLshort (cx, obj, argv[0], nx))
    return JS_FALSE;
  GLshort ny;
  if (!to_GLshort (cx, obj, argv[1], ny))
    return JS_FALSE;
  GLshort nz;
  if (!to_GLshort (cx, obj, argv[2], nz))
    return JS_FALSE;
  glNormal3s (nx, ny, nz);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3bv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbyte v[3];
  if (!to_GLbyte_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glNormal3bv (v);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glNormal3dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glNormal3fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glNormal3iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glNormal3sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glNormal3sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glIndexd (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble c;
  if (!to_GLdouble (cx, obj, argv[0], c))
    return JS_FALSE;
  glIndexd (c);
  return JS_TRUE;
}

static JSBool
ejs_glIndexf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat c;
  if (!to_GLfloat (cx, obj, argv[0], c))
    return JS_FALSE;
  glIndexf (c);
  return JS_TRUE;
}

static JSBool
ejs_glIndexi (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint c;
  if (!to_GLint (cx, obj, argv[0], c))
    return JS_FALSE;
  glIndexi (c);
  return JS_TRUE;
}

static JSBool
ejs_glIndexs (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort c;
  if (!to_GLshort (cx, obj, argv[0], c))
    return JS_FALSE;
  glIndexs (c);
  return JS_TRUE;
}

static JSBool
ejs_glIndexub (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLubyte c;
  if (!to_GLubyte (cx, obj, argv[0], c))
    return JS_FALSE;
  glIndexub (c);
  return JS_TRUE;
}

/* TODO: glIndexdv */

/* TODO: glIndexfv */

/* TODO: glIndexiv */

/* TODO: glIndexsv */

/* TODO: glIndexubv */

static JSBool
ejs_glColor3b (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLbyte red;
  if (!to_GLbyte (cx, obj, argv[0], red))
    return JS_FALSE;
  GLbyte green;
  if (!to_GLbyte (cx, obj, argv[1], green))
    return JS_FALSE;
  GLbyte blue;
  if (!to_GLbyte (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3b (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble red;
  if (!to_GLdouble (cx, obj, argv[0], red))
    return JS_FALSE;
  GLdouble green;
  if (!to_GLdouble (cx, obj, argv[1], green))
    return JS_FALSE;
  GLdouble blue;
  if (!to_GLdouble (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3d (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat red;
  if (!to_GLfloat (cx, obj, argv[0], red))
    return JS_FALSE;
  GLfloat green;
  if (!to_GLfloat (cx, obj, argv[1], green))
    return JS_FALSE;
  GLfloat blue;
  if (!to_GLfloat (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3f (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint red;
  if (!to_GLint (cx, obj, argv[0], red))
    return JS_FALSE;
  GLint green;
  if (!to_GLint (cx, obj, argv[1], green))
    return JS_FALSE;
  GLint blue;
  if (!to_GLint (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3i (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLshort red;
  if (!to_GLshort (cx, obj, argv[0], red))
    return JS_FALSE;
  GLshort green;
  if (!to_GLshort (cx, obj, argv[1], green))
    return JS_FALSE;
  GLshort blue;
  if (!to_GLshort (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3s (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3ub (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLubyte red;
  if (!to_GLubyte (cx, obj, argv[0], red))
    return JS_FALSE;
  GLubyte green;
  if (!to_GLubyte (cx, obj, argv[1], green))
    return JS_FALSE;
  GLubyte blue;
  if (!to_GLubyte (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3ub (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3ui (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLuint red;
  if (!to_GLuint (cx, obj, argv[0], red))
    return JS_FALSE;
  GLuint green;
  if (!to_GLuint (cx, obj, argv[1], green))
    return JS_FALSE;
  GLuint blue;
  if (!to_GLuint (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3ui (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor3us (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLushort red;
  if (!to_GLushort (cx, obj, argv[0], red))
    return JS_FALSE;
  GLushort green;
  if (!to_GLushort (cx, obj, argv[1], green))
    return JS_FALSE;
  GLushort blue;
  if (!to_GLushort (cx, obj, argv[2], blue))
    return JS_FALSE;
  glColor3us (red, green, blue);
  return JS_TRUE;
}

static JSBool
ejs_glColor4b (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLbyte red;
  if (!to_GLbyte (cx, obj, argv[0], red))
    return JS_FALSE;
  GLbyte green;
  if (!to_GLbyte (cx, obj, argv[1], green))
    return JS_FALSE;
  GLbyte blue;
  if (!to_GLbyte (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLbyte alpha;
  if (!to_GLbyte (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4b (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble red;
  if (!to_GLdouble (cx, obj, argv[0], red))
    return JS_FALSE;
  GLdouble green;
  if (!to_GLdouble (cx, obj, argv[1], green))
    return JS_FALSE;
  GLdouble blue;
  if (!to_GLdouble (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLdouble alpha;
  if (!to_GLdouble (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4d (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat red;
  if (!to_GLfloat (cx, obj, argv[0], red))
    return JS_FALSE;
  GLfloat green;
  if (!to_GLfloat (cx, obj, argv[1], green))
    return JS_FALSE;
  GLfloat blue;
  if (!to_GLfloat (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLfloat alpha;
  if (!to_GLfloat (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4f (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint red;
  if (!to_GLint (cx, obj, argv[0], red))
    return JS_FALSE;
  GLint green;
  if (!to_GLint (cx, obj, argv[1], green))
    return JS_FALSE;
  GLint blue;
  if (!to_GLint (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLint alpha;
  if (!to_GLint (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4i (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLshort red;
  if (!to_GLshort (cx, obj, argv[0], red))
    return JS_FALSE;
  GLshort green;
  if (!to_GLshort (cx, obj, argv[1], green))
    return JS_FALSE;
  GLshort blue;
  if (!to_GLshort (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLshort alpha;
  if (!to_GLshort (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4s (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4ub (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLubyte red;
  if (!to_GLubyte (cx, obj, argv[0], red))
    return JS_FALSE;
  GLubyte green;
  if (!to_GLubyte (cx, obj, argv[1], green))
    return JS_FALSE;
  GLubyte blue;
  if (!to_GLubyte (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLubyte alpha;
  if (!to_GLubyte (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4ub (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4ui (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLuint red;
  if (!to_GLuint (cx, obj, argv[0], red))
    return JS_FALSE;
  GLuint green;
  if (!to_GLuint (cx, obj, argv[1], green))
    return JS_FALSE;
  GLuint blue;
  if (!to_GLuint (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLuint alpha;
  if (!to_GLuint (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4ui (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor4us (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLushort red;
  if (!to_GLushort (cx, obj, argv[0], red))
    return JS_FALSE;
  GLushort green;
  if (!to_GLushort (cx, obj, argv[1], green))
    return JS_FALSE;
  GLushort blue;
  if (!to_GLushort (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLushort alpha;
  if (!to_GLushort (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glColor4us (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glColor3bv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbyte v[3];
  if (!to_GLbyte_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3bv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3ubv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLubyte v[3];
  if (!to_GLubyte_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3ubv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3uiv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint v[3];
  if (!to_GLuint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3uiv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor3usv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLushort v[3];
  if (!to_GLushort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glColor3usv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4bv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLbyte v[4];
  if (!to_GLbyte_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4bv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[4];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[4];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[4];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[4];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4ubv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLubyte v[4];
  if (!to_GLubyte_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4ubv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4uiv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint v[4];
  if (!to_GLuint_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4uiv (v);
  return JS_TRUE;
}

static JSBool
ejs_glColor4usv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLushort v[4];
  if (!to_GLushort_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glColor4usv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[0], s))
    return JS_FALSE;
  glTexCoord1d (s);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[0], s))
    return JS_FALSE;
  glTexCoord1f (s);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint s;
  if (!to_GLint (cx, obj, argv[0], s))
    return JS_FALSE;
  glTexCoord1i (s);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort s;
  if (!to_GLshort (cx, obj, argv[0], s))
    return JS_FALSE;
  glTexCoord1s (s);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[0], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[1], t))
    return JS_FALSE;
  glTexCoord2d (s, t);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[0], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[1], t))
    return JS_FALSE;
  glTexCoord2f (s, t);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLint s;
  if (!to_GLint (cx, obj, argv[0], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[1], t))
    return JS_FALSE;
  glTexCoord2i (s, t);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLshort s;
  if (!to_GLshort (cx, obj, argv[0], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[1], t))
    return JS_FALSE;
  glTexCoord2s (s, t);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[0], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[1], t))
    return JS_FALSE;
  GLdouble r;
  if (!to_GLdouble (cx, obj, argv[2], r))
    return JS_FALSE;
  glTexCoord3d (s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[0], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[1], t))
    return JS_FALSE;
  GLfloat r;
  if (!to_GLfloat (cx, obj, argv[2], r))
    return JS_FALSE;
  glTexCoord3f (s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint s;
  if (!to_GLint (cx, obj, argv[0], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[1], t))
    return JS_FALSE;
  GLint r;
  if (!to_GLint (cx, obj, argv[2], r))
    return JS_FALSE;
  glTexCoord3i (s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLshort s;
  if (!to_GLshort (cx, obj, argv[0], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[1], t))
    return JS_FALSE;
  GLshort r;
  if (!to_GLshort (cx, obj, argv[2], r))
    return JS_FALSE;
  glTexCoord3s (s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[0], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[1], t))
    return JS_FALSE;
  GLdouble r;
  if (!to_GLdouble (cx, obj, argv[2], r))
    return JS_FALSE;
  GLdouble q;
  if (!to_GLdouble (cx, obj, argv[3], q))
    return JS_FALSE;
  glTexCoord4d (s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[0], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[1], t))
    return JS_FALSE;
  GLfloat r;
  if (!to_GLfloat (cx, obj, argv[2], r))
    return JS_FALSE;
  GLfloat q;
  if (!to_GLfloat (cx, obj, argv[3], q))
    return JS_FALSE;
  glTexCoord4f (s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint s;
  if (!to_GLint (cx, obj, argv[0], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[1], t))
    return JS_FALSE;
  GLint r;
  if (!to_GLint (cx, obj, argv[2], r))
    return JS_FALSE;
  GLint q;
  if (!to_GLint (cx, obj, argv[3], q))
    return JS_FALSE;
  glTexCoord4i (s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLshort s;
  if (!to_GLshort (cx, obj, argv[0], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[1], t))
    return JS_FALSE;
  GLshort r;
  if (!to_GLshort (cx, obj, argv[2], r))
    return JS_FALSE;
  GLshort q;
  if (!to_GLshort (cx, obj, argv[3], q))
    return JS_FALSE;
  glTexCoord4s (s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[1];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 1))
    return JS_FALSE;
  glTexCoord1dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[1];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 1))
    return JS_FALSE;
  glTexCoord1fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[1];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 1))
    return JS_FALSE;
  glTexCoord1iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord1sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[1];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 1))
    return JS_FALSE;
  glTexCoord1sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[2];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glTexCoord2dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[2];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glTexCoord2fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[2];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glTexCoord2iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord2sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[2];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glTexCoord2sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glTexCoord3dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glTexCoord3fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glTexCoord3iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord3sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glTexCoord3sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[4];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glTexCoord4dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[4];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glTexCoord4fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[4];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glTexCoord4iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glTexCoord4sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[4];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glTexCoord4sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  glRasterPos2d (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  glRasterPos2f (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  glRasterPos2i (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  glRasterPos2s (x, y);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  glRasterPos3d (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  glRasterPos3f (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLint z;
  if (!to_GLint (cx, obj, argv[2], z))
    return JS_FALSE;
  glRasterPos3i (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  GLshort z;
  if (!to_GLshort (cx, obj, argv[2], z))
    return JS_FALSE;
  glRasterPos3s (x, y, z);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble x;
  if (!to_GLdouble (cx, obj, argv[0], x))
    return JS_FALSE;
  GLdouble y;
  if (!to_GLdouble (cx, obj, argv[1], y))
    return JS_FALSE;
  GLdouble z;
  if (!to_GLdouble (cx, obj, argv[2], z))
    return JS_FALSE;
  GLdouble w;
  if (!to_GLdouble (cx, obj, argv[3], w))
    return JS_FALSE;
  glRasterPos4d (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat x;
  if (!to_GLfloat (cx, obj, argv[0], x))
    return JS_FALSE;
  GLfloat y;
  if (!to_GLfloat (cx, obj, argv[1], y))
    return JS_FALSE;
  GLfloat z;
  if (!to_GLfloat (cx, obj, argv[2], z))
    return JS_FALSE;
  GLfloat w;
  if (!to_GLfloat (cx, obj, argv[3], w))
    return JS_FALSE;
  glRasterPos4f (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4i (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLint z;
  if (!to_GLint (cx, obj, argv[2], z))
    return JS_FALSE;
  GLint w;
  if (!to_GLint (cx, obj, argv[3], w))
    return JS_FALSE;
  glRasterPos4i (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4s (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLshort x;
  if (!to_GLshort (cx, obj, argv[0], x))
    return JS_FALSE;
  GLshort y;
  if (!to_GLshort (cx, obj, argv[1], y))
    return JS_FALSE;
  GLshort z;
  if (!to_GLshort (cx, obj, argv[2], z))
    return JS_FALSE;
  GLshort w;
  if (!to_GLshort (cx, obj, argv[3], w))
    return JS_FALSE;
  glRasterPos4s (x, y, z, w);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[2];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glRasterPos2dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[2];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glRasterPos2fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[2];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glRasterPos2iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos2sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[2];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 2))
    return JS_FALSE;
  glRasterPos2sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glRasterPos3dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glRasterPos3fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glRasterPos3iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos3sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 3))
    return JS_FALSE;
  glRasterPos3sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble v[4];
  if (!to_GLdouble_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glRasterPos4dv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat v[4];
  if (!to_GLfloat_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glRasterPos4fv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4iv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint v[4];
  if (!to_GLint_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glRasterPos4iv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRasterPos4sv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLshort v[4];
  if (!to_GLshort_VEC (cx, obj, argv[0], v, 4))
    return JS_FALSE;
  glRasterPos4sv (v);
  return JS_TRUE;
}

static JSBool
ejs_glRectd (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLdouble x1;
  if (!to_GLdouble (cx, obj, argv[0], x1))
    return JS_FALSE;
  GLdouble y1;
  if (!to_GLdouble (cx, obj, argv[1], y1))
    return JS_FALSE;
  GLdouble x2;
  if (!to_GLdouble (cx, obj, argv[2], x2))
    return JS_FALSE;
  GLdouble y2;
  if (!to_GLdouble (cx, obj, argv[3], y2))
    return JS_FALSE;
  glRectd (x1, y1, x2, y2);
  return JS_TRUE;
}

static JSBool
ejs_glRectf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLfloat x1;
  if (!to_GLfloat (cx, obj, argv[0], x1))
    return JS_FALSE;
  GLfloat y1;
  if (!to_GLfloat (cx, obj, argv[1], y1))
    return JS_FALSE;
  GLfloat x2;
  if (!to_GLfloat (cx, obj, argv[2], x2))
    return JS_FALSE;
  GLfloat y2;
  if (!to_GLfloat (cx, obj, argv[3], y2))
    return JS_FALSE;
  glRectf (x1, y1, x2, y2);
  return JS_TRUE;
}

static JSBool
ejs_glRecti (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLint x1;
  if (!to_GLint (cx, obj, argv[0], x1))
    return JS_FALSE;
  GLint y1;
  if (!to_GLint (cx, obj, argv[1], y1))
    return JS_FALSE;
  GLint x2;
  if (!to_GLint (cx, obj, argv[2], x2))
    return JS_FALSE;
  GLint y2;
  if (!to_GLint (cx, obj, argv[3], y2))
    return JS_FALSE;
  glRecti (x1, y1, x2, y2);
  return JS_TRUE;
}

static JSBool
ejs_glRects (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLshort x1;
  if (!to_GLshort (cx, obj, argv[0], x1))
    return JS_FALSE;
  GLshort y1;
  if (!to_GLshort (cx, obj, argv[1], y1))
    return JS_FALSE;
  GLshort x2;
  if (!to_GLshort (cx, obj, argv[2], x2))
    return JS_FALSE;
  GLshort y2;
  if (!to_GLshort (cx, obj, argv[3], y2))
    return JS_FALSE;
  glRects (x1, y1, x2, y2);
  return JS_TRUE;
}

/* TODO: glRectdv */

/* TODO: glRectfv */

/* TODO: glRectiv */

/* TODO: glRectsv */

/* TODO: glVertexPointer */

/* TODO: glNormalPointer */

/* TODO: glColorPointer */

/* TODO: glIndexPointer */

/* TODO: glTexCoordPointer */

/* TODO: glEdgeFlagPointer */

/* TODO: glGetPointerv */

static JSBool
ejs_glArrayElement (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint i;
  if (!to_GLint (cx, obj, argv[0], i))
    return JS_FALSE;
  glArrayElement (i);
  return JS_TRUE;
}

static JSBool
ejs_glDrawArrays (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  GLint first;
  if (!to_GLint (cx, obj, argv[1], first))
    return JS_FALSE;
  GLsizei count;
  if (!to_GLsizei (cx, obj, argv[2], count))
    return JS_FALSE;
  glDrawArrays (mode, first, count);
  return JS_TRUE;
}

/* TODO: glDrawElements */

/* TODO: glInterleavedArrays */

static JSBool
ejs_glShadeModel (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glShadeModel (mode);
  return JS_TRUE;
}

static JSBool
ejs_glLightf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum light;
  if (!to_GLenum (cx, obj, argv[0], light))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[2], param))
    return JS_FALSE;
  glLightf (light, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glLighti (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum light;
  if (!to_GLenum (cx, obj, argv[0], light))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[2], param))
    return JS_FALSE;
  glLighti (light, pname, param);
  return JS_TRUE;
}

/* TODO: glLightfv */

/* TODO: glLightiv */

/* TODO: glGetLightfv */

/* TODO: glGetLightiv */

static JSBool
ejs_glLightModelf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[1], param))
    return JS_FALSE;
  glLightModelf (pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glLightModeli (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[1], param))
    return JS_FALSE;
  glLightModeli (pname, param);
  return JS_TRUE;
}

/* TODO: glLightModelfv */

/* TODO: glLightModeliv */

static JSBool
ejs_glMaterialf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum face;
  if (!to_GLenum (cx, obj, argv[0], face))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[2], param))
    return JS_FALSE;
  glMaterialf (face, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glMateriali (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum face;
  if (!to_GLenum (cx, obj, argv[0], face))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[2], param))
    return JS_FALSE;
  glMateriali (face, pname, param);
  return JS_TRUE;
}

/* TODO: glMaterialfv */

/* TODO: glMaterialiv */

/* TODO: glGetMaterialfv */

/* TODO: glGetMaterialiv */

static JSBool
ejs_glColorMaterial (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum face;
  if (!to_GLenum (cx, obj, argv[0], face))
    return JS_FALSE;
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[1], mode))
    return JS_FALSE;
  glColorMaterial (face, mode);
  return JS_TRUE;
}

static JSBool
ejs_glPixelZoom (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat xfactor;
  if (!to_GLfloat (cx, obj, argv[0], xfactor))
    return JS_FALSE;
  GLfloat yfactor;
  if (!to_GLfloat (cx, obj, argv[1], yfactor))
    return JS_FALSE;
  glPixelZoom (xfactor, yfactor);
  return JS_TRUE;
}

static JSBool
ejs_glPixelStoref (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[1], param))
    return JS_FALSE;
  glPixelStoref (pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glPixelStorei (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[1], param))
    return JS_FALSE;
  glPixelStorei (pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glPixelTransferf (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[1], param))
    return JS_FALSE;
  glPixelTransferf (pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glPixelTransferi (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[1], param))
    return JS_FALSE;
  glPixelTransferi (pname, param);
  return JS_TRUE;
}

/* TODO: glPixelMapfv */

/* TODO: glPixelMapuiv */

/* TODO: glPixelMapusv */

/* TODO: glGetPixelMapfv */

/* TODO: glGetPixelMapuiv */

/* TODO: glGetPixelMapusv */

/* TODO: glBitmap */

/* TODO: glReadPixels */

/* TODO: glDrawPixels */

static JSBool
ejs_glCopyPixels (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLint x;
  if (!to_GLint (cx, obj, argv[0], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[1], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[2], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[3], height))
    return JS_FALSE;
  GLenum type;
  if (!to_GLenum (cx, obj, argv[4], type))
    return JS_FALSE;
  glCopyPixels (x, y, width, height, type);
  return JS_TRUE;
}

static JSBool
ejs_glStencilFunc (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum func;
  if (!to_GLenum (cx, obj, argv[0], func))
    return JS_FALSE;
  GLint ref;
  if (!to_GLint (cx, obj, argv[1], ref))
    return JS_FALSE;
  GLuint mask;
  if (!to_GLuint (cx, obj, argv[2], mask))
    return JS_FALSE;
  glStencilFunc (func, ref, mask);
  return JS_TRUE;
}

static JSBool
ejs_glStencilMask (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint mask;
  if (!to_GLuint (cx, obj, argv[0], mask))
    return JS_FALSE;
  glStencilMask (mask);
  return JS_TRUE;
}

static JSBool
ejs_glStencilOp (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum fail;
  if (!to_GLenum (cx, obj, argv[0], fail))
    return JS_FALSE;
  GLenum zfail;
  if (!to_GLenum (cx, obj, argv[1], zfail))
    return JS_FALSE;
  GLenum zpass;
  if (!to_GLenum (cx, obj, argv[2], zpass))
    return JS_FALSE;
  glStencilOp (fail, zfail, zpass);
  return JS_TRUE;
}

static JSBool
ejs_glClearStencil (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint s;
  if (!to_GLint (cx, obj, argv[0], s))
    return JS_FALSE;
  glClearStencil (s);
  return JS_TRUE;
}

static JSBool
ejs_glTexGend (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum coord;
  if (!to_GLenum (cx, obj, argv[0], coord))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLdouble param;
  if (!to_GLdouble (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexGend (coord, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glTexGenf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum coord;
  if (!to_GLenum (cx, obj, argv[0], coord))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexGenf (coord, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glTexGeni (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum coord;
  if (!to_GLenum (cx, obj, argv[0], coord))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexGeni (coord, pname, param);
  return JS_TRUE;
}

/* TODO: glTexGendv */

/* TODO: glTexGenfv */

/* TODO: glTexGeniv */

/* TODO: glGetTexGendv */

/* TODO: glGetTexGenfv */

/* TODO: glGetTexGeniv */

static JSBool
ejs_glTexEnvf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexEnvf (target, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glTexEnvi (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	       jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexEnvi (target, pname, param);
  return JS_TRUE;
}

/* TODO: glTexEnvfv */

/* TODO: glTexEnviv */

/* TODO: glGetTexEnvfv */

/* TODO: glGetTexEnviv */

static JSBool
ejs_glTexParameterf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexParameterf (target, pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glTexParameteri (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[2], param))
    return JS_FALSE;
  glTexParameteri (target, pname, param);
  return JS_TRUE;
}

/* TODO: glTexParameterfv */

/* TODO: glTexParameteriv */

/* TODO: glGetTexParameterfv */

/* TODO: glGetTexParameteriv */

/* TODO: glGetTexLevelParameterfv */

/* TODO: glGetTexLevelParameteriv */

/* TODO: glTexImage1D */

/* TODO: glTexImage2D */

/* TODO: glGetTexImage */

#ifdef GL_VERSION_1_1
/* TODO: glGenTextures */

/* TODO: glDeleteTextures */

static JSBool
ejs_glBindTexture (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLuint texture;
  if (!to_GLuint (cx, obj, argv[1], texture))
    return JS_FALSE;
  glBindTexture (target, texture);
  return JS_TRUE;
}

/* TODO: glPrioritizeTextures */

/* TODO: glAreTexturesResident */

static JSBool
ejs_glIsTexture (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval * rval)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint texture;
  if (!to_GLuint (cx, obj, argv[0], texture))
    return JS_FALSE;
  GLboolean nres = glIsTexture (texture);
  if (!from_GLboolean (cx, obj, nres, rval))
    return JS_FALSE;
  return JS_TRUE;
}

/* TODO: glTexSubImage1D */

/* TODO: glTexSubImage2D */

static JSBool
ejs_glCopyTexImage1D (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 7, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint level;
  if (!to_GLint (cx, obj, argv[1], level))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[2], internalformat))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[3], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[4], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[5], width))
    return JS_FALSE;
  GLint border;
  if (!to_GLint (cx, obj, argv[6], border))
    return JS_FALSE;
  glCopyTexImage1D (target, level, internalformat, x, y, width, border);
  return JS_TRUE;
}

static JSBool
ejs_glCopyTexImage2D (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 8, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint level;
  if (!to_GLint (cx, obj, argv[1], level))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[2], internalformat))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[3], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[4], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[5], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[6], height))
    return JS_FALSE;
  GLint border;
  if (!to_GLint (cx, obj, argv[7], border))
    return JS_FALSE;
  glCopyTexImage2D (target, level, internalformat, x, y, width, height,
		    border);
  return JS_TRUE;
}

static JSBool
ejs_glCopyTexSubImage1D (JSContext * cx, JSObject * obj, uintN argc,
			 jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint level;
  if (!to_GLint (cx, obj, argv[1], level))
    return JS_FALSE;
  GLint xoffset;
  if (!to_GLint (cx, obj, argv[2], xoffset))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[3], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[4], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[5], width))
    return JS_FALSE;
  glCopyTexSubImage1D (target, level, xoffset, x, y, width);
  return JS_TRUE;
}

static JSBool
ejs_glCopyTexSubImage2D (JSContext * cx, JSObject * obj, uintN argc,
			 jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 8, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint level;
  if (!to_GLint (cx, obj, argv[1], level))
    return JS_FALSE;
  GLint xoffset;
  if (!to_GLint (cx, obj, argv[2], xoffset))
    return JS_FALSE;
  GLint yoffset;
  if (!to_GLint (cx, obj, argv[3], yoffset))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[4], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[5], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[6], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[7], height))
    return JS_FALSE;
  glCopyTexSubImage2D (target, level, xoffset, yoffset, x, y, width, height);
  return JS_TRUE;
}

/* TODO: glMap1d */

/* TODO: glMap1f */

/* TODO: glMap2d */

/* TODO: glMap2f */

/* TODO: glGetMapdv */

/* TODO: glGetMapfv */

/* TODO: glGetMapiv */

static JSBool
ejs_glEvalCoord1d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble u;
  if (!to_GLdouble (cx, obj, argv[0], u))
    return JS_FALSE;
  glEvalCoord1d (u);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord1f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat u;
  if (!to_GLfloat (cx, obj, argv[0], u))
    return JS_FALSE;
  glEvalCoord1f (u);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord1dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble u[1];
  if (!to_GLdouble_VEC (cx, obj, argv[0], u, 1))
    return JS_FALSE;
  glEvalCoord1dv (u);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord1fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat u[1];
  if (!to_GLfloat_VEC (cx, obj, argv[0], u, 1))
    return JS_FALSE;
  glEvalCoord1fv (u);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord2d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLdouble u;
  if (!to_GLdouble (cx, obj, argv[0], u))
    return JS_FALSE;
  GLdouble v;
  if (!to_GLdouble (cx, obj, argv[1], v))
    return JS_FALSE;
  glEvalCoord2d (u, v);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord2f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLfloat u;
  if (!to_GLfloat (cx, obj, argv[0], u))
    return JS_FALSE;
  GLfloat v;
  if (!to_GLfloat (cx, obj, argv[1], v))
    return JS_FALSE;
  glEvalCoord2f (u, v);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord2dv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble u[2];
  if (!to_GLdouble_VEC (cx, obj, argv[0], u, 2))
    return JS_FALSE;
  glEvalCoord2dv (u);
  return JS_TRUE;
}

static JSBool
ejs_glEvalCoord2fv (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		    jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat u[2];
  if (!to_GLfloat_VEC (cx, obj, argv[0], u, 2))
    return JS_FALSE;
  glEvalCoord2fv (u);
  return JS_TRUE;
}

static JSBool
ejs_glMapGrid1d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint un;
  if (!to_GLint (cx, obj, argv[0], un))
    return JS_FALSE;
  GLdouble u1;
  if (!to_GLdouble (cx, obj, argv[1], u1))
    return JS_FALSE;
  GLdouble u2;
  if (!to_GLdouble (cx, obj, argv[2], u2))
    return JS_FALSE;
  glMapGrid1d (un, u1, u2);
  return JS_TRUE;
}

static JSBool
ejs_glMapGrid1f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLint un;
  if (!to_GLint (cx, obj, argv[0], un))
    return JS_FALSE;
  GLfloat u1;
  if (!to_GLfloat (cx, obj, argv[1], u1))
    return JS_FALSE;
  GLfloat u2;
  if (!to_GLfloat (cx, obj, argv[2], u2))
    return JS_FALSE;
  glMapGrid1f (un, u1, u2);
  return JS_TRUE;
}

static JSBool
ejs_glMapGrid2d (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLint un;
  if (!to_GLint (cx, obj, argv[0], un))
    return JS_FALSE;
  GLdouble u1;
  if (!to_GLdouble (cx, obj, argv[1], u1))
    return JS_FALSE;
  GLdouble u2;
  if (!to_GLdouble (cx, obj, argv[2], u2))
    return JS_FALSE;
  GLint vn;
  if (!to_GLint (cx, obj, argv[3], vn))
    return JS_FALSE;
  GLdouble v1;
  if (!to_GLdouble (cx, obj, argv[4], v1))
    return JS_FALSE;
  GLdouble v2;
  if (!to_GLdouble (cx, obj, argv[5], v2))
    return JS_FALSE;
  glMapGrid2d (un, u1, u2, vn, v1, v2);
  return JS_TRUE;
}

static JSBool
ejs_glMapGrid2f (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLint un;
  if (!to_GLint (cx, obj, argv[0], un))
    return JS_FALSE;
  GLfloat u1;
  if (!to_GLfloat (cx, obj, argv[1], u1))
    return JS_FALSE;
  GLfloat u2;
  if (!to_GLfloat (cx, obj, argv[2], u2))
    return JS_FALSE;
  GLint vn;
  if (!to_GLint (cx, obj, argv[3], vn))
    return JS_FALSE;
  GLfloat v1;
  if (!to_GLfloat (cx, obj, argv[4], v1))
    return JS_FALSE;
  GLfloat v2;
  if (!to_GLfloat (cx, obj, argv[5], v2))
    return JS_FALSE;
  glMapGrid2f (un, u1, u2, vn, v1, v2);
  return JS_TRUE;
}

static JSBool
ejs_glEvalPoint1 (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLint i;
  if (!to_GLint (cx, obj, argv[0], i))
    return JS_FALSE;
  glEvalPoint1 (i);
  return JS_TRUE;
}

static JSBool
ejs_glEvalPoint2 (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLint i;
  if (!to_GLint (cx, obj, argv[0], i))
    return JS_FALSE;
  GLint j;
  if (!to_GLint (cx, obj, argv[1], j))
    return JS_FALSE;
  glEvalPoint2 (i, j);
  return JS_TRUE;
}

static JSBool
ejs_glEvalMesh1 (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  GLint i1;
  if (!to_GLint (cx, obj, argv[1], i1))
    return JS_FALSE;
  GLint i2;
  if (!to_GLint (cx, obj, argv[2], i2))
    return JS_FALSE;
  glEvalMesh1 (mode, i1, i2);
  return JS_TRUE;
}

static JSBool
ejs_glEvalMesh2 (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  GLint i1;
  if (!to_GLint (cx, obj, argv[1], i1))
    return JS_FALSE;
  GLint i2;
  if (!to_GLint (cx, obj, argv[2], i2))
    return JS_FALSE;
  GLint j1;
  if (!to_GLint (cx, obj, argv[3], j1))
    return JS_FALSE;
  GLint j2;
  if (!to_GLint (cx, obj, argv[4], j2))
    return JS_FALSE;
  glEvalMesh2 (mode, i1, i2, j1, j2);
  return JS_TRUE;
}

static JSBool
ejs_glFogf (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLfloat param;
  if (!to_GLfloat (cx, obj, argv[1], param))
    return JS_FALSE;
  glFogf (pname, param);
  return JS_TRUE;
}

static JSBool
ejs_glFogi (JSContext * cx, JSObject * obj, uintN argc, jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[0], pname))
    return JS_FALSE;
  GLint param;
  if (!to_GLint (cx, obj, argv[1], param))
    return JS_FALSE;
  glFogi (pname, param);
  return JS_TRUE;
}

/* TODO: glFogfv */

/* TODO: glFogiv */

/* TODO: glFeedbackBuffer */

static JSBool
ejs_glPassThrough (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat token;
  if (!to_GLfloat (cx, obj, argv[0], token))
    return JS_FALSE;
  glPassThrough (token);
  return JS_TRUE;
}

/* TODO: glSelectBuffer */

static JSBool
ejs_glInitNames (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glInitNames ();
  return JS_TRUE;
}

static JSBool
ejs_glLoadName (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint name;
  if (!to_GLuint (cx, obj, argv[0], name))
    return JS_FALSE;
  glLoadName (name);
  return JS_TRUE;
}

static JSBool
ejs_glPushName (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLuint name;
  if (!to_GLuint (cx, obj, argv[0], name))
    return JS_FALSE;
  glPushName (name);
  return JS_TRUE;
}

static JSBool
ejs_glPopName (JSContext * cx, JSObject * obj, uintN argc, jsval *, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 0, argc);
  glPopName ();
  return JS_TRUE;
}
#endif
#ifdef GL_VERSION_1_2
/* TODO: glDrawRangeElements */

/* TODO: glTexImage3D */

/* TODO: glTexSubImage3D */

static JSBool
ejs_glCopyTexSubImage3D (JSContext * cx, JSObject * obj, uintN argc,
			 jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 9, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint level;
  if (!to_GLint (cx, obj, argv[1], level))
    return JS_FALSE;
  GLint xoffset;
  if (!to_GLint (cx, obj, argv[2], xoffset))
    return JS_FALSE;
  GLint yoffset;
  if (!to_GLint (cx, obj, argv[3], yoffset))
    return JS_FALSE;
  GLint zoffset;
  if (!to_GLint (cx, obj, argv[4], zoffset))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[5], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[6], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[7], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[8], height))
    return JS_FALSE;
  glCopyTexSubImage3D (target, level, xoffset, yoffset, zoffset, x, y, width,
		       height);
  return JS_TRUE;
}

/* TODO: glColorTable */

/* TODO: glColorSubTable */

/* TODO: glColorTableParameteriv */

/* TODO: glColorTableParameterfv */

static JSBool
ejs_glCopyColorSubTable (JSContext * cx, JSObject * obj, uintN argc,
			 jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLsizei start;
  if (!to_GLsizei (cx, obj, argv[1], start))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[2], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[3], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[4], width))
    return JS_FALSE;
  glCopyColorSubTable (target, start, x, y, width);
  return JS_TRUE;
}

static JSBool
ejs_glCopyColorTable (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[1], internalformat))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[2], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[3], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[4], width))
    return JS_FALSE;
  glCopyColorTable (target, internalformat, x, y, width);
  return JS_TRUE;
}

/* TODO: glGetColorTable */

/* TODO: glGetColorTableParameterfv */

/* TODO: glGetColorTableParameteriv */

static JSBool
ejs_glBlendEquation (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum mode;
  if (!to_GLenum (cx, obj, argv[0], mode))
    return JS_FALSE;
  glBlendEquation (mode);
  return JS_TRUE;
}

static JSBool
ejs_glBlendColor (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		  jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLclampf red;
  if (!to_GLclampf (cx, obj, argv[0], red))
    return JS_FALSE;
  GLclampf green;
  if (!to_GLclampf (cx, obj, argv[1], green))
    return JS_FALSE;
  GLclampf blue;
  if (!to_GLclampf (cx, obj, argv[2], blue))
    return JS_FALSE;
  GLclampf alpha;
  if (!to_GLclampf (cx, obj, argv[3], alpha))
    return JS_FALSE;
  glBlendColor (red, green, blue, alpha);
  return JS_TRUE;
}

static JSBool
ejs_glHistogram (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		 jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[1], width))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[2], internalformat))
    return JS_FALSE;
  GLboolean sink;
  if (!to_GLboolean (cx, obj, argv[3], sink))
    return JS_FALSE;
  glHistogram (target, width, internalformat, sink);
  return JS_TRUE;
}

static JSBool
ejs_glResetHistogram (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  glResetHistogram (target);
  return JS_TRUE;
}

/* TODO: glGetHistogram */

/* TODO: glGetHistogramParameterfv */

/* TODO: glGetHistogramParameteriv */

static JSBool
ejs_glMinmax (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
	      jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[1], internalformat))
    return JS_FALSE;
  GLboolean sink;
  if (!to_GLboolean (cx, obj, argv[2], sink))
    return JS_FALSE;
  glMinmax (target, internalformat, sink);
  return JS_TRUE;
}

static JSBool
ejs_glResetMinmax (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		   jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  glResetMinmax (target);
  return JS_TRUE;
}

/* TODO: glGetMinmax */

/* TODO: glGetMinmaxParameterfv */

/* TODO: glGetMinmaxParameteriv */

/* TODO: glConvolutionFilter1D */

/* TODO: glConvolutionFilter2D */

static JSBool
ejs_glConvolutionParameterf (JSContext * cx, JSObject * obj, uintN argc,
			     jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLfloat params;
  if (!to_GLfloat (cx, obj, argv[2], params))
    return JS_FALSE;
  glConvolutionParameterf (target, pname, params);
  return JS_TRUE;
}

/* TODO: glConvolutionParameterfv */

static JSBool
ejs_glConvolutionParameteri (JSContext * cx, JSObject * obj, uintN argc,
			     jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum pname;
  if (!to_GLenum (cx, obj, argv[1], pname))
    return JS_FALSE;
  GLint params;
  if (!to_GLint (cx, obj, argv[2], params))
    return JS_FALSE;
  glConvolutionParameteri (target, pname, params);
  return JS_TRUE;
}

/* TODO: glConvolutionParameteriv */

static JSBool
ejs_glCopyConvolutionFilter1D (JSContext * cx, JSObject * obj, uintN argc,
			       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[1], internalformat))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[2], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[3], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[4], width))
    return JS_FALSE;
  glCopyConvolutionFilter1D (target, internalformat, x, y, width);
  return JS_TRUE;
}

static JSBool
ejs_glCopyConvolutionFilter2D (JSContext * cx, JSObject * obj, uintN argc,
			       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 6, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLenum internalformat;
  if (!to_GLenum (cx, obj, argv[1], internalformat))
    return JS_FALSE;
  GLint x;
  if (!to_GLint (cx, obj, argv[2], x))
    return JS_FALSE;
  GLint y;
  if (!to_GLint (cx, obj, argv[3], y))
    return JS_FALSE;
  GLsizei width;
  if (!to_GLsizei (cx, obj, argv[4], width))
    return JS_FALSE;
  GLsizei height;
  if (!to_GLsizei (cx, obj, argv[5], height))
    return JS_FALSE;
  glCopyConvolutionFilter2D (target, internalformat, x, y, width, height);
  return JS_TRUE;
}

/* TODO: glGetConvolutionFilter */

/* TODO: glGetConvolutionParameterfv */

/* TODO: glGetConvolutionParameteriv */

/* TODO: glSeparableFilter2D */

/* TODO: glGetSeparableFilter */

#endif
#ifdef GL_VERSION_1_3
static JSBool
ejs_glActiveTexture (JSContext * cx, JSObject * obj, uintN argc, jsval * argv,
		     jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum texture;
  if (!to_GLenum (cx, obj, argv[0], texture))
    return JS_FALSE;
  glActiveTexture (texture);
  return JS_TRUE;
}

static JSBool
ejs_glClientActiveTexture (JSContext * cx, JSObject * obj, uintN argc,
			   jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLenum texture;
  if (!to_GLenum (cx, obj, argv[0], texture))
    return JS_FALSE;
  glClientActiveTexture (texture);
  return JS_TRUE;
}

/* TODO: glCompressedTexImage1D */

/* TODO: glCompressedTexImage2D */

/* TODO: glCompressedTexImage3D */

/* TODO: glCompressedTexSubImage1D */

/* TODO: glCompressedTexSubImage2D */

/* TODO: glCompressedTexSubImage3D */

/* TODO: glGetCompressedTexImage */

static JSBool
ejs_glMultiTexCoord1d (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[1], s))
    return JS_FALSE;
  glMultiTexCoord1d (target, s);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1dv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble v[1];
  if (!to_GLdouble_VEC (cx, obj, argv[1], v, 1))
    return JS_FALSE;
  glMultiTexCoord1dv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1f (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[1], s))
    return JS_FALSE;
  glMultiTexCoord1f (target, s);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1fv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat v[1];
  if (!to_GLfloat_VEC (cx, obj, argv[1], v, 1))
    return JS_FALSE;
  glMultiTexCoord1fv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1i (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint s;
  if (!to_GLint (cx, obj, argv[1], s))
    return JS_FALSE;
  glMultiTexCoord1i (target, s);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1iv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint v[1];
  if (!to_GLint_VEC (cx, obj, argv[1], v, 1))
    return JS_FALSE;
  glMultiTexCoord1iv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1s (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort s;
  if (!to_GLshort (cx, obj, argv[1], s))
    return JS_FALSE;
  glMultiTexCoord1s (target, s);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord1sv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort v[1];
  if (!to_GLshort_VEC (cx, obj, argv[1], v, 1))
    return JS_FALSE;
  glMultiTexCoord1sv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2d (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[1], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[2], t))
    return JS_FALSE;
  glMultiTexCoord2d (target, s, t);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2dv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble v[2];
  if (!to_GLdouble_VEC (cx, obj, argv[1], v, 2))
    return JS_FALSE;
  glMultiTexCoord2dv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2f (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[1], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[2], t))
    return JS_FALSE;
  glMultiTexCoord2f (target, s, t);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2fv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat v[2];
  if (!to_GLfloat_VEC (cx, obj, argv[1], v, 2))
    return JS_FALSE;
  glMultiTexCoord2fv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2i (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint s;
  if (!to_GLint (cx, obj, argv[1], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[2], t))
    return JS_FALSE;
  glMultiTexCoord2i (target, s, t);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2iv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint v[2];
  if (!to_GLint_VEC (cx, obj, argv[1], v, 2))
    return JS_FALSE;
  glMultiTexCoord2iv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2s (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 3, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort s;
  if (!to_GLshort (cx, obj, argv[1], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[2], t))
    return JS_FALSE;
  glMultiTexCoord2s (target, s, t);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord2sv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort v[2];
  if (!to_GLshort_VEC (cx, obj, argv[1], v, 2))
    return JS_FALSE;
  glMultiTexCoord2sv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3d (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[1], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[2], t))
    return JS_FALSE;
  GLdouble r;
  if (!to_GLdouble (cx, obj, argv[3], r))
    return JS_FALSE;
  glMultiTexCoord3d (target, s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3dv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble v[3];
  if (!to_GLdouble_VEC (cx, obj, argv[1], v, 3))
    return JS_FALSE;
  glMultiTexCoord3dv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3f (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[1], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[2], t))
    return JS_FALSE;
  GLfloat r;
  if (!to_GLfloat (cx, obj, argv[3], r))
    return JS_FALSE;
  glMultiTexCoord3f (target, s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3fv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat v[3];
  if (!to_GLfloat_VEC (cx, obj, argv[1], v, 3))
    return JS_FALSE;
  glMultiTexCoord3fv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3i (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint s;
  if (!to_GLint (cx, obj, argv[1], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[2], t))
    return JS_FALSE;
  GLint r;
  if (!to_GLint (cx, obj, argv[3], r))
    return JS_FALSE;
  glMultiTexCoord3i (target, s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3iv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint v[3];
  if (!to_GLint_VEC (cx, obj, argv[1], v, 3))
    return JS_FALSE;
  glMultiTexCoord3iv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3s (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 4, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort s;
  if (!to_GLshort (cx, obj, argv[1], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[2], t))
    return JS_FALSE;
  GLshort r;
  if (!to_GLshort (cx, obj, argv[3], r))
    return JS_FALSE;
  glMultiTexCoord3s (target, s, t, r);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord3sv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort v[3];
  if (!to_GLshort_VEC (cx, obj, argv[1], v, 3))
    return JS_FALSE;
  glMultiTexCoord3sv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4d (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble s;
  if (!to_GLdouble (cx, obj, argv[1], s))
    return JS_FALSE;
  GLdouble t;
  if (!to_GLdouble (cx, obj, argv[2], t))
    return JS_FALSE;
  GLdouble r;
  if (!to_GLdouble (cx, obj, argv[3], r))
    return JS_FALSE;
  GLdouble q;
  if (!to_GLdouble (cx, obj, argv[4], q))
    return JS_FALSE;
  glMultiTexCoord4d (target, s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4dv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLdouble v[4];
  if (!to_GLdouble_VEC (cx, obj, argv[1], v, 4))
    return JS_FALSE;
  glMultiTexCoord4dv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4f (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat s;
  if (!to_GLfloat (cx, obj, argv[1], s))
    return JS_FALSE;
  GLfloat t;
  if (!to_GLfloat (cx, obj, argv[2], t))
    return JS_FALSE;
  GLfloat r;
  if (!to_GLfloat (cx, obj, argv[3], r))
    return JS_FALSE;
  GLfloat q;
  if (!to_GLfloat (cx, obj, argv[4], q))
    return JS_FALSE;
  glMultiTexCoord4f (target, s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4fv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLfloat v[4];
  if (!to_GLfloat_VEC (cx, obj, argv[1], v, 4))
    return JS_FALSE;
  glMultiTexCoord4fv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4i (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint s;
  if (!to_GLint (cx, obj, argv[1], s))
    return JS_FALSE;
  GLint t;
  if (!to_GLint (cx, obj, argv[2], t))
    return JS_FALSE;
  GLint r;
  if (!to_GLint (cx, obj, argv[3], r))
    return JS_FALSE;
  GLint q;
  if (!to_GLint (cx, obj, argv[4], q))
    return JS_FALSE;
  glMultiTexCoord4i (target, s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4iv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLint v[4];
  if (!to_GLint_VEC (cx, obj, argv[1], v, 4))
    return JS_FALSE;
  glMultiTexCoord4iv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4s (JSContext * cx, JSObject * obj, uintN argc,
		       jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 5, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort s;
  if (!to_GLshort (cx, obj, argv[1], s))
    return JS_FALSE;
  GLshort t;
  if (!to_GLshort (cx, obj, argv[2], t))
    return JS_FALSE;
  GLshort r;
  if (!to_GLshort (cx, obj, argv[3], r))
    return JS_FALSE;
  GLshort q;
  if (!to_GLshort (cx, obj, argv[4], q))
    return JS_FALSE;
  glMultiTexCoord4s (target, s, t, r, q);
  return JS_TRUE;
}

static JSBool
ejs_glMultiTexCoord4sv (JSContext * cx, JSObject * obj, uintN argc,
			jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLenum target;
  if (!to_GLenum (cx, obj, argv[0], target))
    return JS_FALSE;
  GLshort v[4];
  if (!to_GLshort_VEC (cx, obj, argv[1], v, 4))
    return JS_FALSE;
  glMultiTexCoord4sv (target, v);
  return JS_TRUE;
}

static JSBool
ejs_glLoadTransposeMatrixd (JSContext * cx, JSObject * obj, uintN argc,
			    jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble m[16];
  if (!to_GLdouble_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glLoadTransposeMatrixd (m);
  return JS_TRUE;
}

static JSBool
ejs_glLoadTransposeMatrixf (JSContext * cx, JSObject * obj, uintN argc,
			    jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat m[16];
  if (!to_GLfloat_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glLoadTransposeMatrixf (m);
  return JS_TRUE;
}

static JSBool
ejs_glMultTransposeMatrixd (JSContext * cx, JSObject * obj, uintN argc,
			    jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLdouble m[16];
  if (!to_GLdouble_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glMultTransposeMatrixd (m);
  return JS_TRUE;
}

static JSBool
ejs_glMultTransposeMatrixf (JSContext * cx, JSObject * obj, uintN argc,
			    jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 1, argc);
  GLfloat m[16];
  if (!to_GLfloat_VEC (cx, obj, argv[0], m, 16))
    return JS_FALSE;
  glMultTransposeMatrixf (m);
  return JS_TRUE;
}

static JSBool
ejs_glSampleCoverage (JSContext * cx, JSObject * obj, uintN argc,
		      jsval * argv, jsval *)
{
  EJS_CHECK_NUM_ARGS (cx, obj, 2, argc);
  GLclampf value;
  if (!to_GLclampf (cx, obj, argv[0], value))
    return JS_FALSE;
  GLboolean invert;
  if (!to_GLboolean (cx, obj, argv[1], invert))
    return JS_FALSE;
  glSampleCoverage (value, invert);
  return JS_TRUE;
}
#endif
