#!/bin/sh

set -e

. $srcdir/common

runtest '
function assert(x){if (!x()) throw new Error(x.toSource());};
var util=ejs.ModuleLoader.get("util");

function testGetWrapper() {
  var ltdl=ejs.ModuleLoader.get("ltdl");
  var fname=ejs.ModuleLoader.findFile(ejs.config.modules.libraryPath,"ejsltdl.la");
  var module=new ltdl.Ltmodule(fname);
  var func=module.getWrapper("ejsltdl_LTX_selfcheck");
  assert(function(){return func()==0;});
  assert(function(){return func(1)==1;});
  assert(function(){return func(1,2,3,100)==106;});
  var i,a=[];
  // note: the maximum number of arguments to a js function (in sm) is 65534
  var from=1,to=10;
  for (i=from;i<=to;++i)
    a[i]=i;
  assert(function(){return func.apply(this,a)==(from+to)*(to-from+1)/2;});
};

// this test requires us to load a module different from ourself
// since libtool does reference counting and the count would not drop to zero
function testGC() {
  function getFooFunc() {
    var ltdl=ejs.ModuleLoader.get("ltdl");
    var fname=ejs.ModuleLoader.findFile(ejs.config.modules.libraryPath,"ejsexample.la");
    var module=new ltdl.Ltmodule(fname);
    var ret=module.getWrapper("ejsexample_LTX_foo");
    assert(function(){return ret.__parent__==module;});
    assert(function(){
	     // this must not work!
	     ret.__parent__=undefined;
	     return ret.__parent__==module;
	   });
    return ret;
  }

  assert(function(){
	   // get wrapper function in a module
	   var f=getFooFunc();
	   // try to GC module (it should not be collected!)
	   util.GC();
	   // test if wrapper function is still callable
	   return f()=="foo";});
};

testGetWrapper();
util.GC();
testGetWrapper();
util.GC();
testGC();
util.GC();
testGC();
'
